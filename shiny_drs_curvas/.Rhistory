# curva dos municípios do estado usado no filtro e a respectiva
# curva média, usando a função ggploty
tmp <- estim_drs_df %>%
group_by(Data) %>%
dplyr::summarize(R_e = mean(R_e))
p <- estim_drs_df %>%
ggplot( aes(x=Data, y=R_e,color=drs_idhm)) +
geom_line(aes(group=codDRS), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color="black")
ggplotly(p)
tmp1 <- estim_drs_df %>%
group_by(Data) %>%
dplyr::summarize(R_e = mean(R_e))
tmp2 <- estim_drs_df %>%
group_by(Data,drs_idhm) %>%
dplyr::summarize(R_e = mean(R_e))
p <- estim_drs_df %>%
ggplot( aes(x=Data, y=R_e,color=drs_idhm)) +
geom_line(aes(group=codDRS), alpha = .5, size = .5,linetype="dotted") +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=1))) +
geom_line(data=tmp2, alpha = 1, size = 1.5) +
geom_line(data=tmp1, alpha = 1, size = 2,color="black")
ggplotly(p)
tmp1 <- estim_drs_df %>%
group_by(Data) %>%
dplyr::summarize(R_e = mean(R_e))
tmp2 <- estim_drs_df %>%
group_by(Data,drs_idhm) %>%
dplyr::summarize(R_e = mean(R_e))
p <- estim_drs_df %>%
ggplot( aes(x=Data, y=R_e,color=drs_idhm)) +
geom_line(aes(group=codDRS), alpha = .5, size = .5,linetype="dotted") +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=1))) +
geom_line(data=tmp2, alpha = 1, size = 2) +
geom_line(data=tmp1, alpha = 1, size = 2,color="black")
ggplotly(p)
# checando municípios na DRS observada
mun %>% filter(codDRS == "41013") %>% select(Estado,Município) %>% distinct()
# criando uma matriz para ser usada na função fanova.tests, tendo as
# curvas observadas nas colunas e pontos de discretização nas linhas
tmp <- estim_drs_df %>%
select(codDRS,Data,R_e) %>%
tidyr::spread(key = codDRS, value = R_e)
dados_fanova <- tmp %>% select(-Data) %>% as.matrix
rownames(dados_fanova) <- tmp$Data %>% as.character
# vetor com os grupos referente a cada curva observada
grupos_fanova <- estim_drs_df %>%
select(codDRS, drs_idhm) %>%
dplyr::group_by(codDRS) %>% unique %>% as.matrix
grupos_fanova <- rep(NA,ncol(dados_fanova))
tmp <- colnames(dados_fanova)
for(i in 1:length(tmp)){
tmp2 <- estim_drs_df %>% filter(codDRS==tmp[i]) %>%
select(drs_idhm) %>% unique()
grupos_fanova[i] <- tmp2$drs_idhm
}
# checando se todos os grupos tem mais de duas observações
table(grupos_fanova)
plotFANOVA(x = dados_fanova, group.label = grupos_fanova,
means = TRUE)
tmp1 <- estim_drs_df %>%
group_by(Data) %>%
dplyr::summarize(R_e = mean(R_e))
tmp2 <- estim_drs_df %>%
group_by(Data,drs_idhm) %>%
dplyr::summarize(R_e = mean(R_e))
p <- estim_drs_df %>%
ggplot( aes(x=Data, y=R_e,color=drs_idhm)) +
#  geom_line(aes(group=codDRS), alpha = .5, size = .5,linetype="dotted") +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=1))) +
geom_line(data=tmp2, alpha = 1, size = 2) +
geom_line(data=tmp1, alpha = 1, size = 2,color="black")
ggplotly(p)
ggplotly(p)
p <- estim_drs_df %>%
ggplot( aes(x=Data, y=R_e,color=drs_idhm)) +
geom_line(aes(group=codDRS), alpha = .5, size = .5,linetype="dotted") +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=1))) +
geom_line(data=tmp2, alpha = 1, size = 2) +
geom_line(data=tmp1, alpha = 1, size = 2,color="black")
ggplotly(p)
plotFANOVA(x = dados_fanova, group.label = grupos_fanova,
means = TRUE)
fanova <- fanova.tests(x = dados_fanova,
group.label = grupos_fanova,
#test = "FP",
parallel = TRUE, nslaves = 2)
summary(fanova)
class(mean())
class(mean)
class(paste(mean))
paste(mean)
print(mean)
expression(mean)
expression("mean")
expression(paste(mean))
mean()
?expression
tmp <- expression(Estado)
View(drs$tmp)
tmp
tmp <- paste(expression(Estado))
tmp
names(tmp) <- "Estado"
tmp
names(tmp)
names("tmp")
# curva dos municípios do estado usado no filtro e a respectiva
# curva média, usando a função ggploty
variavel <- drs_idhm
tmp <- estim_drs_df %>%
group_by(Data) %>%
dplyr::summarize(R_e = mean(R_e))
p <- estim_drs_df %>%
ggplot( aes(x=Data, y=R_e,color=variavel)) +
geom_line(aes(group=codDRS), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color="black")
ggplotly(p)
# curva dos municípios do estado usado no filtro e a respectiva
# curva média, usando a função ggploty
variavel <- "drs_idhm"
tmp <- estim_drs_df %>%
group_by(Data) %>%
dplyr::summarize(R_e = mean(R_e))
p <- estim_drs_df %>%
mutate_(var = variavel) %>%
ggplot( aes(x=Data, y=R_e,color=variavel)) +
geom_line(aes(group=codDRS), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color="black")
# curva dos municípios do estado usado no filtro e a respectiva
# curva média, usando a função ggploty
variavel0 <- "drs_idhm"
tmp <- estim_drs_df %>%
group_by(Data) %>%
dplyr::summarize(R_e = mean(R_e))
p <- estim_drs_df %>%
mutate_(variavel = variavel0) %>%
ggplot( aes(x=Data, y=R_e,color=variavel)) +
geom_line(aes(group=codDRS), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color="black")
ggplotly(p)
# curva dos municípios do estado usado no filtro e a respectiva
# curva média, usando a função ggploty
variavel0 <- "drs_idhm"
curva0 <- "R_e"
tmp <- estim_drs_df %>%
mutate_(curva = curva0) %>%
group_by(Data) %>%
dplyr::summarize(curva = mean(curva))
p <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
ggplot( aes(x=Data, y=curva, color=variavel)) +
geom_line(aes(group=codDRS), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color="black")
ggplotly(p)
tmp <- estim_drs_df %>%
mutate_(curva = curva0) %>%
group_by(Data) %>%
dplyr::summarize(curva = mean(curva))
p <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
ggplot( aes(x=Data, y=curva, color=variavel)) +
geom_line(aes(group=codDRS), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color="black")
ggplotly(p)
tmp1 <- estim_drs_df %>%
mutate_(curva = curva0) %>%
group_by(Data) %>%
dplyr::summarize(curva = mean(curva))
tmp1 <- estim_drs_df %>%
mutate_(curva = curva0) %>%
group_by(Data) %>%
dplyr::summarize(curva = mean(curva))
tmp2 <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
group_by(Data,variavel) %>%
dplyr::summarize(curva = mean(curva))
p <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
ggplot( aes(x=Data, y=curva, color=variavel)) +
geom_line(aes(group=codDRS), alpha = .5, size = .5,linetype="dotted") +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=1))) +
geom_line(data=tmp2, alpha = 1, size = 2) +
geom_line(data=tmp1, alpha = 1, size = 2,color="black")
ggplotly(p)
# vetor com os grupos referente a cada curva observada
grupos_fanova <- estim_drs_df %>%
mutate_(variavel = variavel0) %>%
select(codDRS, variavel) %>%
dplyr::group_by(codDRS) %>% unique %>% as.matrix
grupos_fanova <- rep(NA,ncol(dados_fanova))
tmp <- colnames(dados_fanova)
tmp
i=1
length(tmp)
tmp2 <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
filter(codDRS==tmp[i]) %>%
select(variavel) %>% unique()
tmp2
tmp2$variavel
# vetor com os grupos referente a cada curva observada
grupos_fanova <- estim_drs_df %>%
mutate_(variavel = variavel0) %>%
select(codDRS, variavel) %>%
dplyr::group_by(codDRS) %>% unique %>% as.matrix
grupos_fanova <- rep(NA,ncol(dados_fanova))
tmp <- colnames(dados_fanova)
for(i in 1:length(tmp)){
tmp2 <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
filter(codDRS==tmp[i]) %>%
select(variavel) %>% unique()
grupos_fanova[i] <- tmp2$variavel
}
# checando se todos os grupos tem mais de duas observações
table(grupos_fanova)
plotFANOVA(x = dados_fanova, group.label = grupos_fanova,
means = TRUE)
# curva dos municípios do estado usado no filtro e a respectiva
# curva média, usando a função ggploty
variavel0 <- "classe_urb"
curva0 <- "R_e"
tmp <- estim_drs_df %>%
mutate_(curva = curva0) %>%
group_by(Data) %>%
dplyr::summarize(curva = mean(curva))
p <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
ggplot( aes(x=Data, y=curva, color=variavel)) +
geom_line(aes(group=codDRS), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color="black")
ggplotly(p)
tmp <- estim_drs_df %>%
mutate_(curva = curva0) %>%
group_by(Data) %>%
dplyr::summarize(curva = mean(curva))
p <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
ggplot( aes(x=Data, y=curva, color=variavel)) +
geom_line(aes(group=codDRS), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color="black")
ggplotly(p)
tmp1 <- estim_drs_df %>%
mutate_(curva = curva0) %>%
group_by(Data) %>%
dplyr::summarize(curva = mean(curva))
tmp2 <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
group_by(Data,variavel) %>%
dplyr::summarize(curva = mean(curva))
p <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
ggplot( aes(x=Data, y=curva, color=variavel)) +
geom_line(aes(group=codDRS), alpha = .5, size = .5,linetype="dotted") +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=1))) +
geom_line(data=tmp2, alpha = 1, size = 2) +
geom_line(data=tmp1, alpha = 1, size = 2,color="black")
ggplotly(p)
# criando uma matriz para ser usada na função fanova.tests, tendo as
# curvas observadas nas colunas e pontos de discretização nas linhas
tmp <- estim_drs_df %>%
mutate_(curva = curva0) %>%
select(codDRS,Data,curva) %>%
tidyr::spread(key = codDRS, value = curva)
dados_fanova <- tmp %>% select(-Data) %>% as.matrix
rownames(dados_fanova) <- tmp$Data %>% as.character
# vetor com os grupos referente a cada curva observada
grupos_fanova <- estim_drs_df %>%
mutate_(variavel = variavel0) %>%
select(codDRS, variavel) %>%
dplyr::group_by(codDRS) %>% unique %>% as.matrix
grupos_fanova <- rep(NA,ncol(dados_fanova))
tmp <- colnames(dados_fanova)
for(i in 1:length(tmp)){
tmp2 <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
filter(codDRS==tmp[i]) %>%
select(variavel) %>% unique()
grupos_fanova[i] <- tmp2$variavel
}
# checando se todos os grupos tem mais de duas observações
table(grupos_fanova)
plotFANOVA(x = dados_fanova, group.label = grupos_fanova,
means = TRUE)
fanova <- fanova.tests(x = dados_fanova,
group.label = grupos_fanova,
#test = "FP",
parallel = TRUE, nslaves = 2)
summary(fanova)
# curva dos municípios do estado usado no filtro e a respectiva
# curva média, usando a função ggploty
variavel0 <- "classe_urb"
curva0 <- "mu_t"
# criando uma matriz para ser usada na função fanova.tests, tendo as
# curvas observadas nas colunas e pontos de discretização nas linhas
tmp <- estim_drs_df %>%
mutate_(curva = curva0) %>%
select(codDRS,Data,curva) %>%
tidyr::spread(key = codDRS, value = curva)
dados_fanova <- tmp %>% select(-Data) %>% as.matrix
rownames(dados_fanova) <- tmp$Data %>% as.character
# vetor com os grupos referente a cada curva observada
grupos_fanova <- estim_drs_df %>%
mutate_(variavel = variavel0) %>%
select(codDRS, variavel) %>%
dplyr::group_by(codDRS) %>% unique %>% as.matrix
grupos_fanova <- rep(NA,ncol(dados_fanova))
tmp <- colnames(dados_fanova)
for(i in 1:length(tmp)){
tmp2 <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
filter(codDRS==tmp[i]) %>%
select(variavel) %>% unique()
grupos_fanova[i] <- tmp2$variavel
}
# checando se todos os grupos tem mais de duas observações
table(grupos_fanova)
plotFANOVA(x = dados_fanova, group.label = grupos_fanova,
means = TRUE)
# curva dos municípios do estado usado no filtro e a respectiva
# curva média, usando a função ggploty
#variavel0 <- "classe_urb"
variavel0 <- "drs_idhm"
curva0 <- "mu_t"
# criando uma matriz para ser usada na função fanova.tests, tendo as
# curvas observadas nas colunas e pontos de discretização nas linhas
tmp <- estim_drs_df %>%
mutate_(curva = curva0) %>%
select(codDRS,Data,curva) %>%
tidyr::spread(key = codDRS, value = curva)
dados_fanova <- tmp %>% select(-Data) %>% as.matrix
rownames(dados_fanova) <- tmp$Data %>% as.character
# vetor com os grupos referente a cada curva observada
grupos_fanova <- estim_drs_df %>%
mutate_(variavel = variavel0) %>%
select(codDRS, variavel) %>%
dplyr::group_by(codDRS) %>% unique %>% as.matrix
grupos_fanova <- rep(NA,ncol(dados_fanova))
tmp <- colnames(dados_fanova)
for(i in 1:length(tmp)){
tmp2 <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
filter(codDRS==tmp[i]) %>%
select(variavel) %>% unique()
grupos_fanova[i] <- tmp2$variavel
}
# checando se todos os grupos tem mais de duas observações
table(grupos_fanova)
plotFANOVA(x = dados_fanova, group.label = grupos_fanova,
means = TRUE)
# curva dos municípios do estado usado no filtro e a respectiva
# curva média, usando a função ggploty
#variavel0 <- "classe_urb"
variavel0 <- "drs_idhm"
curva0 <- "beta_t"
# criando uma matriz para ser usada na função fanova.tests, tendo as
# curvas observadas nas colunas e pontos de discretização nas linhas
tmp <- estim_drs_df %>%
mutate_(curva = curva0) %>%
select(codDRS,Data,curva) %>%
tidyr::spread(key = codDRS, value = curva)
dados_fanova <- tmp %>% select(-Data) %>% as.matrix
rownames(dados_fanova) <- tmp$Data %>% as.character
# vetor com os grupos referente a cada curva observada
grupos_fanova <- estim_drs_df %>%
mutate_(variavel = variavel0) %>%
select(codDRS, variavel) %>%
dplyr::group_by(codDRS) %>% unique %>% as.matrix
grupos_fanova <- rep(NA,ncol(dados_fanova))
tmp <- colnames(dados_fanova)
for(i in 1:length(tmp)){
tmp2 <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
filter(codDRS==tmp[i]) %>%
select(variavel) %>% unique()
grupos_fanova[i] <- tmp2$variavel
}
# checando se todos os grupos tem mais de duas observações
table(grupos_fanova)
plotFANOVA(x = dados_fanova, group.label = grupos_fanova,
means = TRUE)
# curva dos municípios do estado usado no filtro e a respectiva
# curva média, usando a função ggploty
variavel0 <- "classe_urb"
#variavel0 <- "drs_idhm"
curva0 <- "beta_t"
# criando uma matriz para ser usada na função fanova.tests, tendo as
# curvas observadas nas colunas e pontos de discretização nas linhas
tmp <- estim_drs_df %>%
mutate_(curva = curva0) %>%
select(codDRS,Data,curva) %>%
tidyr::spread(key = codDRS, value = curva)
dados_fanova <- tmp %>% select(-Data) %>% as.matrix
rownames(dados_fanova) <- tmp$Data %>% as.character
# vetor com os grupos referente a cada curva observada
grupos_fanova <- estim_drs_df %>%
mutate_(variavel = variavel0) %>%
select(codDRS, variavel) %>%
dplyr::group_by(codDRS) %>% unique %>% as.matrix
grupos_fanova <- rep(NA,ncol(dados_fanova))
tmp <- colnames(dados_fanova)
for(i in 1:length(tmp)){
tmp2 <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
filter(codDRS==tmp[i]) %>%
select(variavel) %>% unique()
grupos_fanova[i] <- tmp2$variavel
}
# checando se todos os grupos tem mais de duas observações
table(grupos_fanova)
plotFANOVA(x = dados_fanova, group.label = grupos_fanova,
means = TRUE)
# curva dos municípios do estado usado no filtro e a respectiva
# curva média, usando a função ggploty
variavel0 <- "classe_urb"
#variavel0 <- "drs_idhm"
curva0 <- "nu_t"
# criando uma matriz para ser usada na função fanova.tests, tendo as
# curvas observadas nas colunas e pontos de discretização nas linhas
tmp <- estim_drs_df %>%
mutate_(curva = curva0) %>%
select(codDRS,Data,curva) %>%
tidyr::spread(key = codDRS, value = curva)
dados_fanova <- tmp %>% select(-Data) %>% as.matrix
rownames(dados_fanova) <- tmp$Data %>% as.character
# vetor com os grupos referente a cada curva observada
grupos_fanova <- estim_drs_df %>%
mutate_(variavel = variavel0) %>%
select(codDRS, variavel) %>%
dplyr::group_by(codDRS) %>% unique %>% as.matrix
grupos_fanova <- rep(NA,ncol(dados_fanova))
tmp <- colnames(dados_fanova)
for(i in 1:length(tmp)){
tmp2 <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
filter(codDRS==tmp[i]) %>%
select(variavel) %>% unique()
grupos_fanova[i] <- tmp2$variavel
}
# checando se todos os grupos tem mais de duas observações
table(grupos_fanova)
plotFANOVA(x = dados_fanova, group.label = grupos_fanova,
means = TRUE)
# curva dos municípios do estado usado no filtro e a respectiva
# curva média, usando a função ggploty
#variavel0 <- "classe_urb"
variavel0 <- "drs_idhm"
curva0 <- "nu_t"
# criando uma matriz para ser usada na função fanova.tests, tendo as
# curvas observadas nas colunas e pontos de discretização nas linhas
tmp <- estim_drs_df %>%
mutate_(curva = curva0) %>%
select(codDRS,Data,curva) %>%
tidyr::spread(key = codDRS, value = curva)
dados_fanova <- tmp %>% select(-Data) %>% as.matrix
rownames(dados_fanova) <- tmp$Data %>% as.character
# vetor com os grupos referente a cada curva observada
grupos_fanova <- estim_drs_df %>%
mutate_(variavel = variavel0) %>%
select(codDRS, variavel) %>%
dplyr::group_by(codDRS) %>% unique %>% as.matrix
grupos_fanova <- rep(NA,ncol(dados_fanova))
tmp <- colnames(dados_fanova)
for(i in 1:length(tmp)){
tmp2 <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
filter(codDRS==tmp[i]) %>%
select(variavel) %>% unique()
grupos_fanova[i] <- tmp2$variavel
}
# checando se todos os grupos tem mais de duas observações
table(grupos_fanova)
plotFANOVA(x = dados_fanova, group.label = grupos_fanova,
means = TRUE)
tmp1 <- estim_drs_df %>%
mutate_(curva = curva0) %>%
group_by(Data) %>%
dplyr::summarize(curva = mean(curva))
tmp2 <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
group_by(Data,variavel) %>%
dplyr::summarize(curva = mean(curva))
p <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
#  ggplot( aes(x=Data, y=curva, color=variavel)) +
geom_line(aes(group=codDRS), alpha = .5, size = .5,linetype="dotted") +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=1))) +
geom_line(data=tmp2, alpha = 1, size = 2) +
geom_line(data=tmp1, alpha = 1, size = 2,color="black")
ggplotly(p)
p <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
ggplot( aes(x=Data, y=curva, color=variavel)) +
#  geom_line(aes(group=codDRS), alpha = .5, size = .5,linetype="dotted") +
guides(colour = guide_legend(override.aes = list(alpha = 1,size=1))) +
geom_line(data=tmp2, alpha = 1, size = 2) +
geom_line(data=tmp1, alpha = 1, size = 2,color="black")
ggplotly(p)
#
tmp <- estim_drs_df %>%
mutate_(curva = curva0) %>%
group_by(Data) %>%
dplyr::summarize(curva = mean(curva))
p <- estim_drs_df %>%
mutate_(variavel = variavel0, curva = curva0) %>%
ggplot( aes(x=Data, y=curva, color=variavel)) +
geom_line(aes(group=codDRS), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color="black")
ggplotly(p)
do.call
?do.call
