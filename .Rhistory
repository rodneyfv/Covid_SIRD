length(unique(keys_fora_do_df_msaude$Codigo))
tmp <- left_join(keys_fora_do_df_msaude,df_msaude,by=c(Codigo, Data))
tmp <- left_join(keys_fora_do_df_msaude,df_msaude,by=c("Codigo", "Data"))
dim(tmp)
dim(keys_fora_do_df_msaude)
View(tmp)
tmp <- df_msaude %>% select(Codigo,Data,codDRS,nomDRS) %>%
right_join(keys_fora_do_df_msaude,by=c("Codigo", "Data"))
dim(tmp)
View(tmp)
tmp <- keys_fora_do_df_msaude %>% group_by(Codigo,Data) %>%
right_join(df_msaude,by=c("Codigo", "Data"))
tmp <- keys_fora_do_df_msaude %>% group_by(Codigo,Data) %>%
right_join(df_msaude %>% select(Codigo,Data,codDRS,nomDRS),
by=c("Codigo", "Data"))
tmp <- keys_fora_do_df_msaude %>% group_by(Codigo,Data) %>%
right_join(df_msaude %>% select(Codigo,Data,codDRS,nomDRS),
by=c("Codigo", "Data")) %>% ungroup
tmp <- inner_join(keys_fora_do_df_msaude,df_msaude,by=c("Codigo", "Data"))
tmp <- inner_join(keys_fora_do_df_msaude,
df_msaude %>% select(Codigo,Data,codDRS,nomDRS),
by=c("Codigo", "Data"))
View(tmp)
dim(keys_fora_do_df_msaude)
dim(df_msaude)
View(df_msaude)
View(keys_fora_do_df_msaude)
tmp <- inner_join(keys_fora_do_df_msaude,
df_msaude %>% select(Codigo,codDRS,nomDRS),
by=c("Codigo"))
dim(tmp)
tmp <- keys_fora_do_df_msaude %>% group_by(Codigo) %>%
inner_join(df_msaude %>% group_by(Codigo,codDRS,nomDRS),
by=c("Codigo"))
dim(tmp)
tmp <- df_msaude %>% group_by(Codigo,codDRS,nomDRS)
tmp <- df_msaude %>% select(Codigo,codDRS,nomDRS) %>% group_by(Codigo,codDRS,nomDRS)
tmp <- df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct()
tmp <- keys_fora_do_df_msaude %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dim(tmp)
dim(keys_fora_do_df_msaude)
# adicionando os dados de DRS referentes aos municípios neste dataframe
keys_fora_do_df_msaude <- keys_fora_do_df_msaude %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(keys_fora_do_df_msaude, df_msaude)
dados_sem_buracos <- expand.grid(Codigo = unique(dados$Codigo), Data = unique(dados$Data)) %>%
dplyr::mutate(Codigo = as.character(Codigo), Data = ymd(Data))
buracos <- anti_join(dados_sem_buracos, dados %>% dplyr::select(Codigo, Data))
dim(buracos)
head(buracos)
filter(dados,Codigo=="310260")
filter(dados,Codigo=="310260") %>% View
table(buracos$Data)
# Vou substituir os buracos pelo ultimo dado. Sao poucos confirmados e
# obitos nesses casos.
buracos <- buracos %>% dplyr::mutate(confirmed = NA, deaths = NA)
buracos <- anti_join(dados_sem_buracos, dados %>% dplyr::select(Codigo, Data))
# Vou substituir os buracos pelo ultimo dado. Sao poucos confirmados e
# obitos nesses casos.
buracos <- buracos %>% dplyr::mutate(confirmed = NA, deaths = NA)
for(i_b in 1:nrow(buracos)) {
buracos$confirmed[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(confirmed) %>% last %>% as.numeric
buracos$deaths[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(deaths) %>% last %>% as.numeric
}
dados <- rbind(dados, buracos) %>% dplyr::arrange(Codigo, Data)
dim(dados)
dim(buracos)
tmp <- buracos %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dim(tmp)
# adicionando os dados de DRS referentes aos municípios neste dataframe
buracos <- buracos %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(dados, buracos) %>% dplyr::arrange(Codigo, Data)
# Check de que nao tem mais buracos:
nrow(dados) == nrow(dados_sem_buracos)
dados_finais <- dados %>% left_join(df_caracteristicas_fixas)
saveRDS(dados_finais, "dados_por_municipio.rds")
#
dados_finais_agg <- dados_finais %>% dplyr::group_by(Data) %>%
dplyr::summarise(confirmed = sum(confirmed), deaths = sum(deaths))
MS_BR <- read_excel(arquivo_min_saude, guess_max = 1000000) %>% dplyr::filter(regiao == "Brasil")
MS_BR <- MS_BR %>%
dplyr::select(data, casosAcumulado, obitosAcumulado, Recuperadosnovos) %>%
dplyr::mutate(Data = ymd(data), confirmed = as.numeric(casosAcumulado),
deaths = as.numeric(obitosAcumulado), recovered = as.numeric(Recuperadosnovos),
recovered = ifelse(is.na(recovered), 0, recovered)) %>% dplyr::select(Data, confirmed, deaths, recovered)
View
View(dados_finais_agg)
View(MS_BR)
dados <- read.csv("mun_2SemEpd.csv")
dados <- read.csv("mun_2SemEpd.csv")
View(dados)
# Tabelas de contingência: IDHM x 2 Semanas epidem.
tmp <- dados %>% group_by(Estado,Município) %>%
select(grupIDHM,grupSemEpd) %>%
distinct()
library(dplyr)
# Tabelas de contingência: IDHM x 2 Semanas epidem.
tmp <- dados %>% group_by(Estado,Município) %>%
select(grupIDHM,grupSemEpd) %>%
distinct()
table(tmp$grupIDHM,tmp$grupSemEpd)
prop.table(table(tmp$grupIDHM,tmp$grupSemEpd))
# Tabelas de contingência: urbanização x 2 Semanas epidem.
tmp <- dados %>% group_by(Estado,Município) %>%
select(classe_urb,grupSemEpd) %>%
distinct()
table(tmp$classe_urb,tmp$grupSemEpd)
prop.table(table(tmp$classe_urb,tmp$grupSemEpd))
# número de municípios dentro de cada estado que tem ou não 2
# semanas epidemiológicas
dados %>% select(Estado, Município, grupSemEpd) %>%
distinct() %>% group_by(Estado, grupSemEpd) %>%
dplyr::summarise(n = n()) %>% spread(key = grupSemEpd, value = n) %>%
print(n=30)
library(tidyr)
# número de municípios dentro de cada estado que tem ou não 2
# semanas epidemiológicas
dados %>% select(Estado, Município, grupSemEpd) %>%
distinct() %>% group_by(Estado, grupSemEpd) %>%
dplyr::summarise(n = n()) %>% spread(key = grupSemEpd, value = n) %>%
print(n=30)
# número de municípios dentro de cada estado que pertencem a cada
# um dos grupos de IDHM
dados %>% select(Estado, Município, grupIDHM) %>%
distinct() %>% group_by(Estado, grupIDHM) %>%
dplyr::summarise(n = n()) %>% spread(key = grupIDHM, value = n) %>%
print(n=30)
# dentre os municípios que tem 2 semanas epidemiológicas, quantos destes
# dentro de cada estado pertencem a cada um dos grupos de IDHM
dados %>% filter(grupSemEpd==TRUE) %>%
select(Estado, Município, grupIDHM) %>%
distinct() %>% group_by(Estado, grupIDHM) %>%
dplyr::summarise(n = n()) %>% spread(key = grupIDHM, value = n) %>%
print(n=30)
dados <- read.csv("mun_2SemEpd.csv")
# Nome do arquivo do min. saude
# arquivo_min_saude <- "HIST_PAINEL_COVIDBR_31mai2020.xlsx"
arquivo_min_saude <- "HIST_PAINEL_COVIDBR_08jun2020.xlsx"
# Nome do arquivo a ser usado como historico
arquivo_historico <- "Dados_Municipais_wide.csv"
pacote <- function(p){
if (!is.element(p, installed.packages()[,1])){
message('Pacote ',p,' nao encontrado. Instalando..')
install.packages(p, dep = TRUE)
}
message('Carregando pacote ',p)
require_worked <- try(require(p, character.only = TRUE))
if(!require_worked) {
install.packages(p, dep = TRUE)
}
}
pacote("tidyverse")
pacote("lubridate")
pacote("writexl")
pacote("httr")
pacote("readr")
pacote("readxl")
# Atualizando tidyr se necessario
if(installed.packages() %>% as.data.frame %>%
dplyr::filter(Package == "tidyr") %>% pull(Version)
%>% as.character < "1.0") {
install.packages("tidyr")
pacote("tidyr")
}
# Dados enviados por Henrique e Iuri
municipais_wide <- read_csv(arquivo_historico) %>%
dplyr::mutate(Codigo = as.character(Codigo))
df_caracteristicas_fixas <- municipais_wide %>%
dplyr::select(- starts_with("casos"), - starts_with("mortes"))
municipais_wide_casos <- municipais_wide %>%
dplyr::select(Codigo, starts_with("casos."))
municipais_wide_mortes <- municipais_wide %>%
dplyr::select(Codigo, starts_with("mortes."))
mun_casos <- municipais_wide_casos %>%
pivot_longer(- c(Codigo), names_to = "Data", values_to = "confirmed") %>%
dplyr::mutate(Data = Data %>% str_replace_all("casos.", "") %>% ymd)
mun <- municipais_wide_mortes %>%
pivot_longer(- c(Codigo), names_to = "Data", values_to = "deaths") %>%
dplyr::mutate(Data = Data %>% str_replace_all("mortes.", "") %>% ymd) %>%
full_join(mun_casos)
df_msaude <- read_excel(paste0(arquivo_min_saude), guess_max = 100000) %>%
dplyr::select(Data = data, Codigo = codmun, deaths = obitosAcumulado,
Municipio = municipio, codDRS = codRegiaoSaude,
nomDRS = nomeRegiaoSaude, confirmed = casosAcumulado) %>%
dplyr::mutate(Data = ymd(Data),
confirmed = as.numeric(confirmed),
deaths = as.numeric(deaths)) %>%
dplyr::filter(!is.na(Municipio)) %>% dplyr::select(-Municipio)
ultima_data_disponivel <- df_msaude$Data %>% max
# Vendo quais municipios nao estao indo ate a ultima data da base (possiveis erros)
codigos_com_erro <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::summarise(menor_data = min(Data), maior_data = max(Data)) %>%
dplyr::arrange(maior_data) %>% dplyr::filter(maior_data != max(maior_data)) %>%
dplyr::pull(Codigo)
message("Numero de municipios que nao vao ate o final: ", length(codigos_com_erro))
message("Valores de casos acumulados para os municipios com esse erro: ",
df_msaude %>% dplyr::filter(Codigo %in% codigos_com_erro) %>%
dplyr::pull(confirmed) %>% unique %>% sort %>% paste(collapse = ", "))
message("Vou completar esses municipios repetindo o ultimo valor de casos e
obitos ate a ultima data")
for(cod_ in codigos_com_erro) {
tbl_temp <- df_msaude %>% dplyr::filter(Codigo == cod_) %>%
dplyr::filter(Data == max(Data)) %>% unique()
ultima_data <- tbl_temp$Data
datas_faltantes <- seq.Date(from = ultima_data + 1, to = ultima_data_disponivel, by = 1)
tbl_completando <- tibble(Data = datas_faltantes, Codigo = cod_) %>%
left_join(tbl_temp %>% dplyr::select(-Data), by = "Codigo") %>%
dplyr::select(colnames(tbl_temp))
df_msaude <- rbind(df_msaude, tbl_completando)
}
# Essa base ja esta com todos os municipios indo ate a ultima data
df_msaude <- df_msaude %>% dplyr::arrange(Codigo, Data)
comparacao_primeiro_dia <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::filter(Data == min(Data)) %>%
dplyr::select(everything(), deaths_MS = deaths,
confirmed_MS = confirmed) %>% left_join(mun)
class(df_msaude$Codigo[1])
class(mun$Codigo[1])
# deixando Codigo como character
df_msaude <- df_msaude %>% mutate(Codigo = as.character(Codigo))
comparacao_primeiro_dia <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::filter(Data == min(Data)) %>%
dplyr::select(everything(), deaths_MS = deaths,
confirmed_MS = confirmed) %>% left_join(mun)
comparacao_primeiro_dia <- comparacao_primeiro_dia %>% dplyr::mutate(
check_confirmed = confirmed_MS - confirmed,
check_deaths = deaths_MS - deaths
)
# Verificano se os municipios que nem entraram, ate hoje, no do MSaude
# possuem um numero relevante de casos segundo Brasil.IO
mun_apenas_BrasilIO <- mun %>% dplyr::filter(!Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::group_by(Codigo) %>% dplyr::filter(Data == max(Data))  %>% dplyr::arrange(desc(confirmed))
# Dentre os municipios que estao no MS, pegando as datas anteriores
#  as disponiveis no MS
keys_fora_do_df_msaude <- anti_join(mun %>% dplyr::filter(Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::select(Codigo, Data),
df_msaude %>% dplyr::select(Codigo, Data)) %>%
left_join(mun)
# adicionando os dados de DRS referentes aos municípios neste dataframe
keys_fora_do_df_msaude <- keys_fora_do_df_msaude %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(keys_fora_do_df_msaude, df_msaude)
dados_sem_buracos <- expand.grid(Codigo = unique(dados$Codigo), Data = unique(dados$Data)) %>%
dplyr::mutate(Codigo = as.character(Codigo), Data = ymd(Data))
buracos <- anti_join(dados_sem_buracos, dados %>% dplyr::select(Codigo, Data))
# Vou substituir os buracos pelo ultimo dado. Sao poucos confirmados e
# obitos nesses casos.
buracos <- buracos %>% dplyr::mutate(confirmed = NA, deaths = NA)
for(i_b in 1:nrow(buracos)) {
buracos$confirmed[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(confirmed) %>% last %>% as.numeric
buracos$deaths[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(deaths) %>% last %>% as.numeric
}
# adicionando os dados de DRS referentes aos municípios neste dataframe
buracos <- buracos %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(dados, buracos) %>% dplyr::arrange(Codigo, Data)
# Check de que nao tem mais buracos:
nrow(dados) == nrow(dados_sem_buracos)
dados_finais <- dados %>% left_join(df_caracteristicas_fixas)
View(dados_finais)
saveRDS(dados_finais, "dados_por_municipio.rds")
# Nome do arquivo do min. saude
# arquivo_min_saude <- "HIST_PAINEL_COVIDBR_31mai2020.xlsx"
arquivo_min_saude <- "HIST_PAINEL_COVIDBR_08jun2020.xlsx"
# Nome do arquivo do min. saude
arquivo_min_saude <- "HIST_PAINEL_COVIDBR_16jun2020.xlsx"
# Nome do arquivo a ser usado como historico
arquivo_historico <- "Dados_Municipais_wide.csv"
pacote <- function(p){
if (!is.element(p, installed.packages()[,1])){
message('Pacote ',p,' nao encontrado. Instalando..')
install.packages(p, dep = TRUE)
}
message('Carregando pacote ',p)
require_worked <- try(require(p, character.only = TRUE))
if(!require_worked) {
install.packages(p, dep = TRUE)
}
}
pacote("tidyverse")
pacote("lubridate")
pacote("writexl")
pacote("httr")
pacote("readr")
pacote("readxl")
# Atualizando tidyr se necessario
if(installed.packages() %>% as.data.frame %>%
dplyr::filter(Package == "tidyr") %>% pull(Version)
%>% as.character < "1.0") {
install.packages("tidyr")
pacote("tidyr")
}
# Dados enviados por Henrique e Iuri
municipais_wide <- read_csv(arquivo_historico) %>%
dplyr::mutate(Codigo = as.character(Codigo))
df_caracteristicas_fixas <- municipais_wide %>%
dplyr::select(- starts_with("casos"), - starts_with("mortes"))
municipais_wide_casos <- municipais_wide %>%
dplyr::select(Codigo, starts_with("casos."))
municipais_wide_mortes <- municipais_wide %>%
dplyr::select(Codigo, starts_with("mortes."))
mun_casos <- municipais_wide_casos %>%
pivot_longer(- c(Codigo), names_to = "Data", values_to = "confirmed") %>%
dplyr::mutate(Data = Data %>% str_replace_all("casos.", "") %>% ymd)
mun <- municipais_wide_mortes %>%
pivot_longer(- c(Codigo), names_to = "Data", values_to = "deaths") %>%
dplyr::mutate(Data = Data %>% str_replace_all("mortes.", "") %>% ymd) %>%
full_join(mun_casos)
df_msaude <- read_excel(paste0(arquivo_min_saude), guess_max = 100000) %>%
dplyr::select(Data = data, Codigo = codmun, deaths = obitosAcumulado,
Municipio = municipio, codDRS = codRegiaoSaude,
nomDRS = nomeRegiaoSaude, confirmed = casosAcumulado) %>%
dplyr::mutate(Data = ymd(Data),
confirmed = as.numeric(confirmed),
deaths = as.numeric(deaths)) %>%
dplyr::filter(!is.na(Municipio)) %>% dplyr::select(-Municipio)
# Existem municípios com linhas duplicadas para uma mesma data de 30/05.
# Vamos remover agora pra seguir com a análise
tmp <- sort(unique(df_msaude$Data),decreasing = TRUE)[c(1:2)]
df_msaude <- df_msaude %>% filter(!(Data %in% tmp))
ultima_data_disponivel <- df_msaude$Data %>% max
# Vendo quais municipios nao estao indo ate a ultima data da base (possiveis erros)
codigos_com_erro <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::summarise(menor_data = min(Data), maior_data = max(Data)) %>%
dplyr::arrange(maior_data) %>% dplyr::filter(maior_data != max(maior_data)) %>%
dplyr::pull(Codigo)
message("Numero de municipios que nao vao ate o final: ", length(codigos_com_erro))
message("Valores de casos acumulados para os municipios com esse erro: ",
df_msaude %>% dplyr::filter(Codigo %in% codigos_com_erro) %>%
dplyr::pull(confirmed) %>% unique %>% sort %>% paste(collapse = ", "))
message("Vou completar esses municipios repetindo o ultimo valor de casos e
obitos ate a ultima data")
for(cod_ in codigos_com_erro) {
tbl_temp <- df_msaude %>% dplyr::filter(Codigo == cod_) %>%
dplyr::filter(Data == max(Data)) %>% unique()
ultima_data <- tbl_temp$Data
datas_faltantes <- seq.Date(from = ultima_data + 1, to = ultima_data_disponivel, by = 1)
tbl_completando <- tibble(Data = datas_faltantes, Codigo = cod_) %>%
left_join(tbl_temp %>% dplyr::select(-Data), by = "Codigo") %>%
dplyr::select(colnames(tbl_temp))
df_msaude <- rbind(df_msaude, tbl_completando)
}
# Essa base ja esta com todos os municipios indo ate a ultima data
df_msaude <- df_msaude %>% dplyr::arrange(Codigo, Data)
# deixando Codigo como character
df_msaude <- df_msaude %>% mutate(Codigo = as.character(Codigo))
comparacao_primeiro_dia <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::filter(Data == min(Data)) %>%
dplyr::select(everything(), deaths_MS = deaths,
confirmed_MS = confirmed) %>% left_join(mun)
comparacao_primeiro_dia <- comparacao_primeiro_dia %>% dplyr::mutate(
check_confirmed = confirmed_MS - confirmed,
check_deaths = deaths_MS - deaths
)
# Verificano se os municipios que nem entraram, ate hoje, no do MSaude
# possuem um numero relevante de casos segundo Brasil.IO
mun_apenas_BrasilIO <- mun %>% dplyr::filter(!Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::group_by(Codigo) %>% dplyr::filter(Data == max(Data))  %>% dplyr::arrange(desc(confirmed))
# Dentre os municipios que estao no MS, pegando as datas anteriores
#  as disponiveis no MS
keys_fora_do_df_msaude <- anti_join(mun %>% dplyr::filter(Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::select(Codigo, Data),
df_msaude %>% dplyr::select(Codigo, Data)) %>%
left_join(mun)
# adicionando os dados de DRS referentes aos municípios neste dataframe
keys_fora_do_df_msaude <- keys_fora_do_df_msaude %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(keys_fora_do_df_msaude, df_msaude)
dados_sem_buracos <- expand.grid(Codigo = unique(dados$Codigo), Data = unique(dados$Data)) %>%
dplyr::mutate(Codigo = as.character(Codigo), Data = ymd(Data))
buracos <- anti_join(dados_sem_buracos, dados %>% dplyr::select(Codigo, Data))
# Vou substituir os buracos pelo ultimo dado. Sao poucos confirmados e
# obitos nesses casos.
buracos <- buracos %>% dplyr::mutate(confirmed = NA, deaths = NA)
for(i_b in 1:nrow(buracos)) {
buracos$confirmed[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(confirmed) %>% last %>% as.numeric
buracos$deaths[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(deaths) %>% last %>% as.numeric
}
# Nome do arquivo do min. saude
arquivo_min_saude <- "HIST_PAINEL_COVIDBR_16jun2020.xlsx"
# Nome do arquivo a ser usado como historico
arquivo_historico <- "Dados_Municipais_wide.csv"
# Atualizando tidyr se necessario
if(installed.packages() %>% as.data.frame %>%
dplyr::filter(Package == "tidyr") %>% pull(Version)
%>% as.character < "1.0") {
install.packages("tidyr")
pacote("tidyr")
}
# Dados enviados por Henrique e Iuri
municipais_wide <- read_csv(arquivo_historico) %>%
dplyr::mutate(Codigo = as.character(Codigo))
df_caracteristicas_fixas <- municipais_wide %>%
dplyr::select(- starts_with("casos"), - starts_with("mortes"))
municipais_wide_casos <- municipais_wide %>%
dplyr::select(Codigo, starts_with("casos."))
municipais_wide_mortes <- municipais_wide %>%
dplyr::select(Codigo, starts_with("mortes."))
mun_casos <- municipais_wide_casos %>%
pivot_longer(- c(Codigo), names_to = "Data", values_to = "confirmed") %>%
dplyr::mutate(Data = Data %>% str_replace_all("casos.", "") %>% ymd)
mun <- municipais_wide_mortes %>%
pivot_longer(- c(Codigo), names_to = "Data", values_to = "deaths") %>%
dplyr::mutate(Data = Data %>% str_replace_all("mortes.", "") %>% ymd) %>%
full_join(mun_casos)
df_msaude <- read_excel(paste0(arquivo_min_saude), guess_max = 100000) %>%
dplyr::select(Data = data, Codigo = codmun, deaths = obitosAcumulado,
Municipio = municipio, codDRS = codRegiaoSaude,
nomDRS = nomeRegiaoSaude, confirmed = casosAcumulado) %>%
dplyr::mutate(Data = ymd(Data),
confirmed = as.numeric(confirmed),
deaths = as.numeric(deaths)) %>%
dplyr::filter(!is.na(Municipio)) %>% dplyr::select(-Municipio)
ultima_data_disponivel <- df_msaude$Data %>% max
# Vendo quais municipios nao estao indo ate a ultima data da base (possiveis erros)
codigos_com_erro <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::summarise(menor_data = min(Data), maior_data = max(Data)) %>%
dplyr::arrange(maior_data) %>% dplyr::filter(maior_data != max(maior_data)) %>%
dplyr::pull(Codigo)
message("Numero de municipios que nao vao ate o final: ", length(codigos_com_erro))
message("Valores de casos acumulados para os municipios com esse erro: ",
df_msaude %>% dplyr::filter(Codigo %in% codigos_com_erro) %>%
dplyr::pull(confirmed) %>% unique %>% sort %>% paste(collapse = ", "))
message("Vou completar esses municipios repetindo o ultimo valor de casos e
obitos ate a ultima data")
for(cod_ in codigos_com_erro) {
tbl_temp <- df_msaude %>% dplyr::filter(Codigo == cod_) %>%
dplyr::filter(Data == max(Data)) %>% unique()
ultima_data <- tbl_temp$Data
datas_faltantes <- seq.Date(from = ultima_data + 1, to = ultima_data_disponivel, by = 1)
tbl_completando <- tibble(Data = datas_faltantes, Codigo = cod_) %>%
left_join(tbl_temp %>% dplyr::select(-Data), by = "Codigo") %>%
dplyr::select(colnames(tbl_temp))
df_msaude <- rbind(df_msaude, tbl_completando)
}
# Essa base ja esta com todos os municipios indo ate a ultima data
df_msaude <- df_msaude %>% dplyr::arrange(Codigo, Data)
# deixando Codigo como character
df_msaude <- df_msaude %>% mutate(Codigo = as.character(Codigo))
comparacao_primeiro_dia <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::filter(Data == min(Data)) %>%
dplyr::select(everything(), deaths_MS = deaths,
confirmed_MS = confirmed) %>% left_join(mun)
comparacao_primeiro_dia <- comparacao_primeiro_dia %>% dplyr::mutate(
check_confirmed = confirmed_MS - confirmed,
check_deaths = deaths_MS - deaths
)
# Verificano se os municipios que nem entraram, ate hoje, no do MSaude
# possuem um numero relevante de casos segundo Brasil.IO
mun_apenas_BrasilIO <- mun %>% dplyr::filter(!Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::group_by(Codigo) %>% dplyr::filter(Data == max(Data))  %>% dplyr::arrange(desc(confirmed))
# Dentre os municipios que estao no MS, pegando as datas anteriores
#  as disponiveis no MS
keys_fora_do_df_msaude <- anti_join(mun %>% dplyr::filter(Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::select(Codigo, Data),
df_msaude %>% dplyr::select(Codigo, Data)) %>%
left_join(mun)
# adicionando os dados de DRS referentes aos municípios neste dataframe
keys_fora_do_df_msaude <- keys_fora_do_df_msaude %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(keys_fora_do_df_msaude, df_msaude)
dados_sem_buracos <- expand.grid(Codigo = unique(dados$Codigo), Data = unique(dados$Data)) %>%
dplyr::mutate(Codigo = as.character(Codigo), Data = ymd(Data))
buracos <- anti_join(dados_sem_buracos, dados %>% dplyr::select(Codigo, Data))
# Vou substituir os buracos pelo ultimo dado. Sao poucos confirmados e
# obitos nesses casos.
buracos <- buracos %>% dplyr::mutate(confirmed = NA, deaths = NA)
nrow(buracos)
buracos
# adicionando os dados de DRS referentes aos municípios neste dataframe
buracos <- buracos %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
buracos
dados <- rbind(dados, buracos) %>% dplyr::arrange(Codigo, Data)
# Check de que nao tem mais buracos:
nrow(dados) == nrow(dados_sem_buracos)
dados_finais <- dados %>% left_join(df_caracteristicas_fixas)
saveRDS(dados_finais, "dados_por_municipio.rds")
