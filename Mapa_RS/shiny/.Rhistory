# checando se a DRS possui pelo menos duas semanas epidemiológicas
if(!(is.na(linha_corte[1]) | length(linha_corte)<14)){
tmp <- run_SIRD(df = dados_drs,
size_population = dados_drs$populacao[1],
minimum_number_cases = caso_corte,
kc = 1, kd = 1, kr = 1, power_H = 0.4,
recovered_synthetic = TRUE, remove_last = 6)[c("Rt")]
# númerode dias para os quais temos estimativas
num_dias <- length(tmp$Rt)
# vetor com as datas referentes às estimativas
tmp2 <- names(tmp$Rt)
estimadores_drs[[i]] <- append(tmp,
list(Estado = rep(EstDRS$Estado[i],num_dias),
codDRS = rep(EstDRS$codDRS[i],num_dias),
date=tmp2))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
#table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp > 2)], as.data.frame)
estim_drs_df <- do.call("rbind",tmp2)
estim_drs_df <- dplyr::mutate(estim_drs_df,date = as.Date(date))
estim_drs_df <- dplyr::left_join(estim_drs_df,drs,by=c("Estado","codDRS","date")) %>%
tibble
#View(estim_mun_df)
rm(EstDRS); rm(estimadores_drs)
# deixamos o código das RSs aqui também para poder compara
# com os códigos em mun_rs
estim_drs_df <- estim_drs_df %>% mutate(codDRS = as.character(codDRS))
# salvando os dados num formato que economiza mais espaço que
# o dataframe completo
tmp <- estim_drs_df %>% dplyr::select(Rt,date,codDRS)
tmp1 <- estim_drs_df %>% dplyr::select(Estado,codDRS,nomDRS) %>% distinct()
estim_drs_df = list(Rt_date=tmp,estado_nomDRS=tmp1)
saveRDS(estim_drs_df,
paste("./Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep=""))
library(shiny)
runApp('./shiny/')
library(rgdal)
library(dplyr)
library(tidyverse)
library(stringi)
library(RColorBrewer)
library(leaflet)
library(maptools)
library(sp)
library(raster)
shp_mun <- readOGR("/media/rodney/Arquivos/Datasets/Dados_Municipios_BR/br_municipios/BR_Municipios_2019.shp",
stringsAsFactors=TRUE, encoding="UTF-8")
class(shp_mun)
#head(shp_mun$CD_MUN)
# usando somente os 6 primeiros dígitos do código dos municípios
# para deixar como estão nos dados do Min. da Saúde
shp_mun$CD_MUN <- str_sub(as.character(shp_mun$CD_MUN),
start = 1,end = 6)
#head(shp_mun$CD_MUN)
shp_mun@data <- shp_mun@data %>% dplyr::mutate(Codigo = CD_MUN) %>%
dplyr::select(-CD_MUN)
mun <- readRDS("../dados_por_municipio.rds")
# selecionando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::select(Estado,Município,Codigo,codDRS,nomDRS) %>%
dplyr::distinct()
mun_rs <- sp::merge(shp_mun,mun, by.x = "Codigo", by.y = "Codigo")
#plot(mun_rs)
#View(mun_rs@data)
rm(shp_mun) # deleting the shp_mun variable
# Aggregate a SpatialPolygon* object, optionally by combining
# polygons that have the same attributes for one or more variables
mun_rs = raster::aggregate(mun_rs, by = "codDRS")
mun_rs <- merge(mun_rs, mun %>% dplyr::select(codDRS,nomDRS,Estado) %>%
distinct(),
by.x = "codDRS", by.y = "codDRS")
# passar as coordenadas de latitude e longitude para o objeto
proj4string(mun_rs) <- CRS("+proj=longlat +datum=WGS84 +no_defs")
mun_rs@data <- mun_rs@data %>% dplyr::mutate(codDRS = as.character(codDRS))
# tomando as coordenadas das regiões em mun_rs
tmp <- raster::coordinates(mun_rs)
# montando um dataframe com as coordenadas de mun_rs e suas
# variáveis correspondentes
mun_rs_coord <- data.frame(lat = tmp[,1], lon = tmp[,2],
codDRS = mun_rs@data$codDRS,
nomDRS = mun_rs@data$nomDRS,
Estado = mun_rs@data$Estado)
mun_rs_coord <- mun_rs_coord %>% dplyr::mutate(codDRS = as.character(codDRS))
saveRDS(mun_rs_coord, "./Rt_regsaude/mun_rs_coord.rds")
View(mun_rs_coord)
shiny::runApp('shiny')
source("./time_varying_SIRD-master/load_packages.R")
source("./time_varying_SIRD-master/gaussian_kernel.R")
source("./time_varying_SIRD-master/estimator_calculation.R")
source("./time_varying_SIRD-master/run_SIRD.R")
library("stringi")
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% dplyr::select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada)
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% dplyr::group_by(Estado,date,codDRS,nomDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada)
) %>% ungroup %>% arrange(Estado,codDRS)
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
for(i in 1:dim(EstDRS)[1]){
dados_drs <- drs %>% filter(codDRS==EstDRS$codDRS[i])
linha_corte <- which(dados_drs$confirmed >= caso_corte)
# checando se a DRS possui pelo menos duas semanas epidemiológicas
if(!(is.na(linha_corte[1]) | length(linha_corte)<14)){
tmp <- run_SIRD(df = dados_drs,
size_population = dados_drs$populacao[1],
minimum_number_cases = caso_corte,
kc = 1, kd = 1, kr = 1, power_H = 0.4,
recovered_synthetic = TRUE, remove_last = 6)[c("Rt")]
# númerode dias para os quais temos estimativas
num_dias <- length(tmp$Rt)
# vetor com as datas referentes às estimativas
tmp2 <- names(tmp$Rt)
estimadores_drs[[i]] <- append(tmp,
list(Estado = rep(EstDRS$Estado[i],num_dias),
codDRS = rep(EstDRS$codDRS[i],num_dias),
date=tmp2))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
#table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp > 2)], as.data.frame)
estim_drs_df <- do.call("rbind",tmp2)
estim_drs_df <- dplyr::mutate(estim_drs_df,date = as.Date(date))
estim_drs_df <- dplyr::left_join(estim_drs_df,drs,by=c("Estado","codDRS","date")) %>%
tibble
#View(estim_mun_df)
rm(EstDRS); rm(estimadores_drs)
# deixamos o código das RSs aqui também para poder compara
# com os códigos em mun_rs
estim_drs_df <- estim_drs_df %>% mutate(codDRS = as.character(codDRS))
# salvando os dados num formato que economiza mais espaço que
# o dataframe completo
tmp <- estim_drs_df %>% dplyr::select(Rt,date,codDRS)
tmp1 <- estim_drs_df %>% dplyr::select(Estado,codDRS,nomDRS) %>% distinct()
estim_drs_df = list(Rt_date=tmp,estado_nomDRS=tmp1)
saveRDS(estim_drs_df,
paste("./Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep=""))
source("./time_varying_SIRD-master/load_packages.R")
source("./time_varying_SIRD-master/gaussian_kernel.R")
source("./time_varying_SIRD-master/estimator_calculation.R")
source("./time_varying_SIRD-master/run_SIRD.R")
library("stringi")
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% dplyr::select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada)
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% dplyr::group_by(Estado,date,codDRS,nomDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada)
) %>% ungroup %>% arrange(Estado,codDRS)
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
for(i in 1:dim(EstDRS)[1]){
dados_drs <- drs %>% filter(codDRS==EstDRS$codDRS[i])
linha_corte <- which(dados_drs$confirmed >= caso_corte)
# checando se a DRS possui pelo menos duas semanas epidemiológicas
if(!(is.na(linha_corte[1]) | length(linha_corte)<14)){
tmp <- run_SIRD(df = dados_drs,
size_population = dados_drs$populacao[1],
minimum_number_cases = caso_corte,
kc = 1, kd = 1, kr = 1, power_H = 0.4,
recovered_synthetic = TRUE, remove_last = 6)[c("Rt")]
# númerode dias para os quais temos estimativas
num_dias <- length(tmp$Rt)
# vetor com as datas referentes às estimativas
tmp2 <- names(tmp$Rt)
estimadores_drs[[i]] <- append(tmp,
list(Estado = rep(EstDRS$Estado[i],num_dias),
codDRS = rep(EstDRS$codDRS[i],num_dias),
date=tmp2))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
#table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp > 2)], as.data.frame)
estim_drs_df <- do.call("rbind",tmp2)
estim_drs_df <- dplyr::mutate(estim_drs_df,date = as.Date(date))
estim_drs_df <- dplyr::left_join(estim_drs_df,drs,by=c("Estado","codDRS","date")) %>%
tibble
#View(estim_mun_df)
rm(EstDRS); rm(estimadores_drs)
# deixamos o código das RSs aqui também para poder compara
# com os códigos em mun_rs
estim_drs_df <- estim_drs_df %>% mutate(codDRS = as.character(codDRS))
# salvando os dados num formato que economiza mais espaço que
# o dataframe completo
tmp <- estim_drs_df %>% dplyr::select(Rt,date,codDRS)
tmp1 <- estim_drs_df %>% dplyr::select(Estado,codDRS,nomDRS) %>% distinct()
estim_drs_df = list(Rt_date=tmp,estado_nomDRS=tmp1)
saveRDS(estim_drs_df,
paste("./Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep=""))
setwd("~/Documents/COVID-19/Covid_SIRD/Mapa_RS")
mun <- readRDS("../dados_por_municipio.rds")
# selecionando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::select(Estado,Município,Codigo,codDRS,nomDRS) %>%
dplyr::distinct()
library(rgdal)
library(dplyr)
library(tidyverse)
library(stringi)
library(RColorBrewer)
library(leaflet)
library(maptools)
library(sp)
library(raster)
# selecionando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::select(Estado,Município,Codigo,codDRS,nomDRS) %>%
dplyr::distinct()
# selecionando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::select(Estado,Município,Codigo,codDRS,nomDRS) %>%
dplyr::distinct()
View(mun)
#View(mun)
est_mun_rs <- mun %>% select(Estado,Município,codDRS) %>%
distinct()
#View(mun)
est_mun_rs <- mun %>% dplyr::select(Estado,Município,codDRS) %>%
distinct()
View(est_mun_rs)
saveRDS(mun_rs_coord, "./Rt_regsaude/est_mun_rs.rds")
saveRDS(est_mun_rs, "./Rt_regsaude/est_mun_rs.rds")
est_mun_rs <- readRDS("../Rt_regsaude/est_mun_rs.rds")
setwd("~/Documents/COVID-19/Covid_SIRD/Mapa_RS/shiny")
est_mun_rs <- readRDS("../Rt_regsaude/est_mun_rs.rds")
est_mun_rs %>% dplyr::select(Estado) %>% distinct()
est_mun_rs %>% dplyr::select(Estado) %>% distinct() %>% list()
shiny::runApp()
install.packages("shinyWidgets")
library(shinyWidgets)
runApp()
view(est_mun_rs)
runApp()
runApp()
runApp()
View(est_mun_rs)
runApp()
estim_drs_df %>% select(Estado,nomDRS,codDRS) %>% distinct() %>% View()
est_mun_rs %>% filter(codDRS=="51009") %>% distinct() %>% View()
runApp()
runApp()
runApp()
runApp()
runApp()
View(est_mun_rs)
View(mun_rs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tmp <- try(log(2))
tmp <- try(tmp2 <- log(2))
tmp2
log(2)
tmp <- try(tmp2 <- log(-2))
try(tmp2 <- log(-2))
try(tmp2 <- log(-2), silent = TRUE)
try(log(-2), silent = TRUE)
try(log(-2), silent = FALSE)
try(log(2), silent = FALSE)
tmp <- try(log(2), silent = FALSE)
tmp <- try(log(-2), silent = FALSE)
tmp <- try(log(-2),FALSE)
try(log(-2),FALSE)
try(log(2),FALSE)
tmp <- try(log(2),FALSE)
tmp <- try(log(-2),FALSE)
try(tmp <- log(-2),FALSE)
try(tmp = log(-2),FALSE)
?req
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# lendo os dados das RSs em um dataframe com as coordenadas e
# codDRS, nomDRS e estado correspondentes
mun_rs <- readRDS("./Rt_regsaude/mun_rs_coord.rds")
View(mun_rs)
# bando de dados com nome de estados, municípios e códigos
# de RS correspondentes
est_mun_rs <- readRDS("./Rt_regsaude/est_mun_rs.rds")
# lendo os nomes dos arquivos na pasta com as curvas para
# diferentes datas
file_names <- list.files("./Rt_regsaude") %>% substring(1,10)
file_names <- file_names[str_detect(file_names,"2020")]
num_files <- length(file_names) + 1
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
estim_drs_df <- readRDS(paste("./Rt_regsaude/",
max(file_names),"_Rt_drs.rds",sep=""))
estim_drs_df <- left_join(estim_drs_df$Rt_date,estim_drs_df$estado_nomDRS,
by="codDRS")
View(estim_drs_df)
max(file_names)
library(pacman)
# Carregando os pacotes
library(rgdal)
library(dplyr)
library(tidyverse)
library(stringi)
library(RColorBrewer)
library(leaflet)
library(maptools)
library(sp)
library(raster)
library(plotly)
library(openxlsx)
library(shinyWidgets)
# lendo os dados das RSs em um dataframe com as coordenadas e
# codDRS, nomDRS e estado correspondentes
mun_rs <- readRDS("./Rt_regsaude/mun_rs_coord.rds")
# bando de dados com nome de estados, municípios e códigos
# de RS correspondentes
est_mun_rs <- readRDS("./Rt_regsaude/est_mun_rs.rds")
# lendo os nomes dos arquivos na pasta com as curvas para
# diferentes datas
file_names <- list.files("./Rt_regsaude") %>% substring(1,10)
file_names <- file_names[str_detect(file_names,"2020")]
num_files <- length(file_names) + 1
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
estim_drs_df <- readRDS(paste("./Rt_regsaude/",
max(file_names),"_Rt_drs.rds",sep=""))
estim_drs_df <- left_join(estim_drs_df$Rt_date,estim_drs_df$estado_nomDRS,
by="codDRS")
# indices de mun_rs para os quais temos curvas estimadas
codDRS_tem_curva <- which(mun_rs$codDRS %in% estim_drs_df$codDRS)
View(estim_drs_df)
tmp <- estim_drs_df %>% filter(date == max(date))
View(tmp)
View(mun_rs)
dim(tmp)
dim(mun_rs[codDRS_tem_curva,])
ultima_data <- max(estim_drs_df$date)
ultima_data
tmp <- estim_drs_df %>% filter(date == ultima_data)
tmp <- mun_rs[codDRS_tem_curva,] %>% left_join(tmp, by="codDRS")
tmp <- estim_drs_df %>% filter(date == ultima_data) %>%
select(codDRS,Rt)
tmp <- mun_rs[codDRS_tem_curva,] %>% left_join(tmp, by="codDRS")
tmp <- estim_drs_df %>% filter(date == ultima_data) %>%
select(codDRS,nomDRS,Rt)
tmp <- mun_rs[codDRS_tem_curva,] %>%
left_join(tmp, by=c("codDRS","nomDRS"))
ultima_data <- max(estim_drs_df$date)
tmp <- estim_drs_df %>% filter(date == ultima_data) %>%
select(codDRS,nomDRS,Rt)
tmp <- mun_rs[codDRS_tem_curva,] %>%
left_join(tmp, by=c("codDRS"))
tmp <- estim_drs_df %>% filter(date == ultima_data) %>%
select(codDRS,Rt)
tmp <- mun_rs[codDRS_tem_curva,] %>%
left_join(tmp, by=c("codDRS"))
# variável com texto com nome do estado e da RS, para
# ser usada na popup do mapa
state_popup <- paste0("<strong>Estado: </strong>",
tmp$Estado,
"<br><strong>RS: </strong>",
tmp$nomDRS)
state_popup[1:5]
ultima_data
paste("<br><strong>Rt",ultima_data,": </strong>")
paste("<br><strong>Rt (",ultima_data,"): </strong>",sep="")
paste("<br><strong>Rt(",ultima_data,"): </strong>",sep="")
paste("<br>Rt (",ultima_data,"): ",sep="")
shiny::runApp()
state_popup[1:5]
ultima_data <- max(estim_drs_df$date)
tmp <- estim_drs_df %>% filter(date == ultima_data) %>%
select(codDRS,Rt)
tmp <- mun_rs[codDRS_tem_curva,] %>%
left_join(tmp, by=c("codDRS"))
# variável com texto com nome do estado e da RS, para
# ser usada na popup do mapa
state_popup <- paste0("<strong>Estado: </strong>",
tmp$Estado,
"<br><strong>RS: </strong>",
tmp$nomDRS,
paste("<br>Rt (",ultima_data,"): ",sep=""),
round(tmp$Rt,2))
state_popup[1:5]
runApp()
runApp()
shiny::runApp()
# lendo os dados das RSs em um dataframe com as coordenadas e
# codDRS, nomDRS e estado correspondentes
mun_rs <- readRDS("./Rt_regsaude/mun_rs_coord.rds")
# bando de dados com nome de estados, municípios e códigos
# de RS correspondentes
est_mun_rs <- readRDS("./Rt_regsaude/est_mun_rs.rds")
# lendo os nomes dos arquivos na pasta com as curvas para
# diferentes datas
file_names <- list.files("./Rt_regsaude") %>% substring(1,10)
file_names <- file_names[str_detect(file_names,"2020")]
num_files <- length(file_names) + 1
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
estim_drs_df <- readRDS(paste("./Rt_regsaude/",
max(file_names),"_Rt_drs.rds",sep=""))
estim_drs_df <- left_join(estim_drs_df$Rt_date,estim_drs_df$estado_nomDRS,
by="codDRS")
View(estim_drs_df)
runApp()
View(est_mun_rs)
View(mun_rs)
runApp()
runApp()
runApp()
View(mun_rs)
runApp()
mun_rs$nomDRS[1]
class(mun_rs$nomDRS[1])
runApp()
runApp()
vec_mun <- est_mun_rs %>% filter(Estado=="ACRE") %>%
filter(codDRS == "12001") %>%
dplyr::select(Município) %>% distinct()
vec_mun
vec_mun$Município
paste(as.character(vec_mun$Município), sep="' '", collapse=", ")
cat(paste(as.character(vec_mun$Município), sep="' '", collapse=", "))
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
RS_click <- est_mun_rs %>% filter(codDRS=="12001") %>%
dplyr::select(nomDRS) %>% distinct()
RS_click <- mun_rs %>% filter(codDRS=="12001") %>%
dplyr::select(nomDRS) %>% distinct()
RS_click
RS_click$nomDRS
RS_click$nomDRS[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
