)
# Verificano se os municipios que nem entraram, ate hoje, no do MSaude
# possuem um numero relevante de casos segundo Brasil.IO
mun_apenas_BrasilIO <- mun %>% dplyr::filter(!Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::group_by(Codigo) %>% dplyr::filter(Data == max(Data))  %>% dplyr::arrange(desc(confirmed))
# Dentre os municipios que estao no MS, pegando as datas anteriores
#  as disponiveis no MS
keys_fora_do_df_msaude <- anti_join(mun %>% dplyr::filter(Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::select(Codigo, Data),
df_msaude %>% dplyr::select(Codigo, Data)) %>%
left_join(mun)
# adicionando os dados de DRS referentes aos municípios neste dataframe
keys_fora_do_df_msaude <- keys_fora_do_df_msaude %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(keys_fora_do_df_msaude, df_msaude)
dados_sem_buracos <- expand.grid(Codigo = unique(dados$Codigo), Data = unique(dados$Data)) %>%
dplyr::mutate(Codigo = as.character(Codigo), Data = ymd(Data))
buracos <- anti_join(dados_sem_buracos, dados %>% dplyr::select(Codigo, Data))
# Vou substituir os buracos pelo ultimo dado. Sao poucos confirmados e
# obitos nesses casos.
buracos <- buracos %>% dplyr::mutate(confirmed = NA, deaths = NA)
nrow(buracos)
buracos
# adicionando os dados de DRS referentes aos municípios neste dataframe
buracos <- buracos %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
buracos
dados <- rbind(dados, buracos) %>% dplyr::arrange(Codigo, Data)
# Check de que nao tem mais buracos:
nrow(dados) == nrow(dados_sem_buracos)
dados_finais <- dados %>% left_join(df_caracteristicas_fixas)
saveRDS(dados_finais, "dados_por_municipio.rds")
# Nome do arquivo do min. saude
#arquivo_min_saude <- "HIST_PAINEL_COVIDBR_16jun2020.xlsx"
arquivo_min_saude <- "HIST_PAINEL_COVIDBR_18jun2020.xlsx"
# Nome do arquivo a ser usado como historico
arquivo_historico <- "Dados_Municipais_wide.csv"
pacote <- function(p){
if (!is.element(p, installed.packages()[,1])){
message('Pacote ',p,' nao encontrado. Instalando..')
install.packages(p, dep = TRUE)
}
message('Carregando pacote ',p)
require_worked <- try(require(p, character.only = TRUE))
if(!require_worked) {
install.packages(p, dep = TRUE)
}
}
pacote("tidyverse")
pacote("lubridate")
pacote("writexl")
pacote("httr")
pacote("readr")
pacote("readxl")
# Atualizando tidyr se necessario
if(installed.packages() %>% as.data.frame %>%
dplyr::filter(Package == "tidyr") %>% pull(Version)
%>% as.character < "1.0") {
install.packages("tidyr")
pacote("tidyr")
}
# Dados enviados por Henrique e Iuri
municipais_wide <- read_csv(arquivo_historico) %>%
dplyr::mutate(Codigo = as.character(Codigo))
df_caracteristicas_fixas <- municipais_wide %>%
dplyr::select(- starts_with("casos"), - starts_with("mortes"))
municipais_wide_casos <- municipais_wide %>%
dplyr::select(Codigo, starts_with("casos."))
municipais_wide_mortes <- municipais_wide %>%
dplyr::select(Codigo, starts_with("mortes."))
mun_casos <- municipais_wide_casos %>%
pivot_longer(- c(Codigo), names_to = "Data", values_to = "confirmed") %>%
dplyr::mutate(Data = Data %>% str_replace_all("casos.", "") %>% ymd)
mun <- municipais_wide_mortes %>%
pivot_longer(- c(Codigo), names_to = "Data", values_to = "deaths") %>%
dplyr::mutate(Data = Data %>% str_replace_all("mortes.", "") %>% ymd) %>%
full_join(mun_casos)
df_msaude <- read_excel(paste0(arquivo_min_saude), guess_max = 100000) %>%
dplyr::select(Data = data, Codigo = codmun, deaths = obitosAcumulado,
Municipio = municipio, codDRS = codRegiaoSaude,
nomDRS = nomeRegiaoSaude, confirmed = casosAcumulado) %>%
dplyr::mutate(Data = ymd(Data),
confirmed = as.numeric(confirmed),
deaths = as.numeric(deaths)) %>%
dplyr::filter(!is.na(Municipio)) %>% dplyr::select(-Municipio)
ultima_data_disponivel <- df_msaude$Data %>% max
# Vendo quais municipios nao estao indo ate a ultima data da base (possiveis erros)
codigos_com_erro <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::summarise(menor_data = min(Data), maior_data = max(Data)) %>%
dplyr::arrange(maior_data) %>% dplyr::filter(maior_data != max(maior_data)) %>%
dplyr::pull(Codigo)
message("Numero de municipios que nao vao ate o final: ", length(codigos_com_erro))
message("Valores de casos acumulados para os municipios com esse erro: ",
df_msaude %>% dplyr::filter(Codigo %in% codigos_com_erro) %>%
dplyr::pull(confirmed) %>% unique %>% sort %>% paste(collapse = ", "))
message("Vou completar esses municipios repetindo o ultimo valor de casos e
obitos ate a ultima data")
for(cod_ in codigos_com_erro) {
tbl_temp <- df_msaude %>% dplyr::filter(Codigo == cod_) %>%
dplyr::filter(Data == max(Data)) %>% unique()
ultima_data <- tbl_temp$Data
datas_faltantes <- seq.Date(from = ultima_data + 1, to = ultima_data_disponivel, by = 1)
tbl_completando <- tibble(Data = datas_faltantes, Codigo = cod_) %>%
left_join(tbl_temp %>% dplyr::select(-Data), by = "Codigo") %>%
dplyr::select(colnames(tbl_temp))
df_msaude <- rbind(df_msaude, tbl_completando)
}
# Essa base ja esta com todos os municipios indo ate a ultima data
df_msaude <- df_msaude %>% dplyr::arrange(Codigo, Data)
# deixando Codigo como character
df_msaude <- df_msaude %>% mutate(Codigo = as.character(Codigo))
comparacao_primeiro_dia <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::filter(Data == min(Data)) %>%
dplyr::select(everything(), deaths_MS = deaths,
confirmed_MS = confirmed) %>% left_join(mun)
comparacao_primeiro_dia <- comparacao_primeiro_dia %>% dplyr::mutate(
check_confirmed = confirmed_MS - confirmed,
check_deaths = deaths_MS - deaths
)
# Verificano se os municipios que nem entraram, ate hoje, no do MSaude
# possuem um numero relevante de casos segundo Brasil.IO
mun_apenas_BrasilIO <- mun %>% dplyr::filter(!Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::group_by(Codigo) %>% dplyr::filter(Data == max(Data))  %>% dplyr::arrange(desc(confirmed))
# Dentre os municipios que estao no MS, pegando as datas anteriores
#  as disponiveis no MS
keys_fora_do_df_msaude <- anti_join(mun %>% dplyr::filter(Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::select(Codigo, Data),
df_msaude %>% dplyr::select(Codigo, Data)) %>%
left_join(mun)
# adicionando os dados de DRS referentes aos municípios neste dataframe
keys_fora_do_df_msaude <- keys_fora_do_df_msaude %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(keys_fora_do_df_msaude, df_msaude)
dados_sem_buracos <- expand.grid(Codigo = unique(dados$Codigo), Data = unique(dados$Data)) %>%
dplyr::mutate(Codigo = as.character(Codigo), Data = ymd(Data))
buracos <- anti_join(dados_sem_buracos, dados %>% dplyr::select(Codigo, Data))
# Vou substituir os buracos pelo ultimo dado. Sao poucos confirmados e
# obitos nesses casos.
buracos <- buracos %>% dplyr::mutate(confirmed = NA, deaths = NA)
for(i_b in 1:nrow(buracos)) {
buracos$confirmed[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(confirmed) %>% last %>% as.numeric
buracos$deaths[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(deaths) %>% last %>% as.numeric
}
# adicionando os dados de DRS referentes aos municípios neste dataframe
buracos <- buracos %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(dados, buracos) %>% dplyr::arrange(Codigo, Data)
# Check de que nao tem mais buracos:
nrow(dados) == nrow(dados_sem_buracos)
dados_finais <- dados %>% left_join(df_caracteristicas_fixas)
saveRDS(dados_finais, "dados_por_municipio.rds")
# Nome do arquivo do min. saude
#arquivo_min_saude <- "HIST_PAINEL_COVIDBR_16jun2020.xlsx"
arquivo_min_saude <- "HIST_PAINEL_COVIDBR_20jun2020.xlsx"
# Nome do arquivo a ser usado como historico
arquivo_historico <- "Dados_Municipais_wide.csv"
pacote <- function(p){
if (!is.element(p, installed.packages()[,1])){
message('Pacote ',p,' nao encontrado. Instalando..')
install.packages(p, dep = TRUE)
}
message('Carregando pacote ',p)
require_worked <- try(require(p, character.only = TRUE))
if(!require_worked) {
install.packages(p, dep = TRUE)
}
}
pacote("tidyverse")
pacote("lubridate")
pacote("writexl")
pacote("httr")
pacote("readr")
pacote("readxl")
# Atualizando tidyr se necessario
if(installed.packages() %>% as.data.frame %>%
dplyr::filter(Package == "tidyr") %>% pull(Version)
%>% as.character < "1.0") {
install.packages("tidyr")
pacote("tidyr")
}
# Dados enviados por Henrique e Iuri
municipais_wide <- read_csv(arquivo_historico) %>%
dplyr::mutate(Codigo = as.character(Codigo))
df_caracteristicas_fixas <- municipais_wide %>%
dplyr::select(- starts_with("casos"), - starts_with("mortes"))
municipais_wide_casos <- municipais_wide %>%
dplyr::select(Codigo, starts_with("casos."))
municipais_wide_mortes <- municipais_wide %>%
dplyr::select(Codigo, starts_with("mortes."))
mun_casos <- municipais_wide_casos %>%
pivot_longer(- c(Codigo), names_to = "Data", values_to = "confirmed") %>%
dplyr::mutate(Data = Data %>% str_replace_all("casos.", "") %>% ymd)
mun <- municipais_wide_mortes %>%
pivot_longer(- c(Codigo), names_to = "Data", values_to = "deaths") %>%
dplyr::mutate(Data = Data %>% str_replace_all("mortes.", "") %>% ymd) %>%
full_join(mun_casos)
df_msaude <- read_excel(paste0(arquivo_min_saude), guess_max = 100000) %>%
dplyr::select(Data = data, Codigo = codmun, deaths = obitosAcumulado,
Municipio = municipio, codDRS = codRegiaoSaude,
nomDRS = nomeRegiaoSaude, confirmed = casosAcumulado) %>%
dplyr::mutate(Data = ymd(Data),
confirmed = as.numeric(confirmed),
deaths = as.numeric(deaths)) %>%
dplyr::filter(!is.na(Municipio)) %>% dplyr::select(-Municipio)
ultima_data_disponivel <- df_msaude$Data %>% max
# Vendo quais municipios nao estao indo ate a ultima data da base (possiveis erros)
codigos_com_erro <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::summarise(menor_data = min(Data), maior_data = max(Data)) %>%
dplyr::arrange(maior_data) %>% dplyr::filter(maior_data != max(maior_data)) %>%
dplyr::pull(Codigo)
message("Numero de municipios que nao vao ate o final: ", length(codigos_com_erro))
message("Valores de casos acumulados para os municipios com esse erro: ",
df_msaude %>% dplyr::filter(Codigo %in% codigos_com_erro) %>%
dplyr::pull(confirmed) %>% unique %>% sort %>% paste(collapse = ", "))
message("Vou completar esses municipios repetindo o ultimo valor de casos e
obitos ate a ultima data")
for(cod_ in codigos_com_erro) {
tbl_temp <- df_msaude %>% dplyr::filter(Codigo == cod_) %>%
dplyr::filter(Data == max(Data)) %>% unique()
ultima_data <- tbl_temp$Data
datas_faltantes <- seq.Date(from = ultima_data + 1, to = ultima_data_disponivel, by = 1)
tbl_completando <- tibble(Data = datas_faltantes, Codigo = cod_) %>%
left_join(tbl_temp %>% dplyr::select(-Data), by = "Codigo") %>%
dplyr::select(colnames(tbl_temp))
df_msaude <- rbind(df_msaude, tbl_completando)
}
# Essa base ja esta com todos os municipios indo ate a ultima data
df_msaude <- df_msaude %>% dplyr::arrange(Codigo, Data)
# deixando Codigo como character
df_msaude <- df_msaude %>% mutate(Codigo = as.character(Codigo))
comparacao_primeiro_dia <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::filter(Data == min(Data)) %>%
dplyr::select(everything(), deaths_MS = deaths,
confirmed_MS = confirmed) %>% left_join(mun)
comparacao_primeiro_dia <- comparacao_primeiro_dia %>% dplyr::mutate(
check_confirmed = confirmed_MS - confirmed,
check_deaths = deaths_MS - deaths
)
# Verificano se os municipios que nem entraram, ate hoje, no do MSaude
# possuem um numero relevante de casos segundo Brasil.IO
mun_apenas_BrasilIO <- mun %>% dplyr::filter(!Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::group_by(Codigo) %>% dplyr::filter(Data == max(Data))  %>% dplyr::arrange(desc(confirmed))
# Dentre os municipios que estao no MS, pegando as datas anteriores
#  as disponiveis no MS
keys_fora_do_df_msaude <- anti_join(mun %>% dplyr::filter(Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::select(Codigo, Data),
df_msaude %>% dplyr::select(Codigo, Data)) %>%
left_join(mun)
# adicionando os dados de DRS referentes aos municípios neste dataframe
keys_fora_do_df_msaude <- keys_fora_do_df_msaude %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(keys_fora_do_df_msaude, df_msaude)
dados_sem_buracos <- expand.grid(Codigo = unique(dados$Codigo), Data = unique(dados$Data)) %>%
dplyr::mutate(Codigo = as.character(Codigo), Data = ymd(Data))
buracos <- anti_join(dados_sem_buracos, dados %>% dplyr::select(Codigo, Data))
# Vou substituir os buracos pelo ultimo dado. Sao poucos confirmados e
# obitos nesses casos.
dim(buracos)
# Vou substituir os buracos pelo ultimo dado. Sao poucos confirmados e
# obitos nesses casos.
nrow(buracos)
buracos <- buracos %>% dplyr::mutate(confirmed = NA, deaths = NA)
for(i_b in 1:nrow(buracos)) {
buracos$confirmed[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(confirmed) %>% last %>% as.numeric
buracos$deaths[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(deaths) %>% last %>% as.numeric
}
# adicionando os dados de DRS referentes aos municípios neste dataframe
buracos <- buracos %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(dados, buracos) %>% dplyr::arrange(Codigo, Data)
# Check de que nao tem mais buracos:
nrow(dados) == nrow(dados_sem_buracos)
dados_finais <- dados %>% left_join(df_caracteristicas_fixas)
saveRDS(dados_finais, "dados_por_municipio.rds")
source("./time_varying_SIRD-master/load_packages.R")
setwd("~/Documents/COVID-19/Covid_SIRD/Mapa_RS")
source("./time_varying_SIRD-master/load_packages.R")
source("./time_varying_SIRD-master/gaussian_kernel.R")
source("./time_varying_SIRD-master/estimator_calculation.R")
source("./time_varying_SIRD-master/run_SIRD.R")
library("stringi")
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% dplyr::select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada)
View(mun)
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% dplyr::group_by(Estado,date,codDRS,nomDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada)
) %>% ungroup %>% arrange(Estado,codDRS)
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
for(i in 1:dim(EstDRS)[1]){
dados_drs <- drs %>% filter(codDRS==EstDRS$codDRS[i])
linha_corte <- which(dados_drs$confirmed >= caso_corte)
# checando se a DRS possui pelo menos duas semanas epidemiológicas
if(!(is.na(linha_corte[1]) | length(linha_corte)<14)){
tmp <- run_SIRD(df = dados_drs,
size_population = dados_drs$populacao[1],
minimum_number_cases = caso_corte,
kc = 1, kd = 1, kr = 1, power_H = 0.4,
recovered_synthetic = TRUE, remove_last = 6)[c("Rt")]
# númerode dias para os quais temos estimativas
num_dias <- length(tmp$Rt)
# vetor com as datas referentes às estimativas
tmp2 <- names(tmp$Rt)
estimadores_drs[[i]] <- append(tmp,
list(Estado = rep(EstDRS$Estado[i],num_dias),
codDRS = rep(EstDRS$codDRS[i],num_dias),
date=tmp2))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
#table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp > 2)], as.data.frame)
estim_drs_df <- do.call("rbind",tmp2)
estim_drs_df <- dplyr::mutate(estim_drs_df,date = as.Date(date))
estim_drs_df <- dplyr::left_join(estim_drs_df,drs,by=c("Estado","codDRS","date")) %>%
tibble
#View(estim_mun_df)
rm(EstDRS); rm(estimadores_drs)
# deixamos o código das RSs aqui também para poder compara
# com os códigos em mun_rs
estim_drs_df <- estim_drs_df %>% mutate(codDRS = as.character(codDRS))
# salvando os dados num formato que economiza mais espaço que
# o dataframe completo
tmp <- estim_drs_df %>% dplyr::select(Rt,date,codDRS)
tmp1 <- estim_drs_df %>% dplyr::select(Estado,codDRS,nomDRS) %>% distinct()
estim_drs_df = list(Rt_date=tmp,estado_nomDRS=tmp1)
saveRDS(estim_drs_df,
paste("./Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep=""))
library(shiny)
runApp('./shiny/')
dados20 <- readRDS(paste("../Rt_regsaude/2020-06-20_Rt_drs.rds",sep=""))
dados20 <- readRDS(paste("./Rt_regsaude/2020-06-20_Rt_drs.rds",sep=""))
dados19 <- readRDS(paste("./Rt_regsaude/2020-06-19_Rt_drs.rds",sep=""))
View(dados19)
View(dados19$Rt_date)
View(dados20$Rt_date)
setwd("~/Documents/COVID-19/Covid_SIRD/Mapa_RS/shiny")
runApp('../shiny/')
library(pacman)
# Carregando os pacotes
library(rgdal)
library(dplyr)
library(tidyverse)
library(stringi)
library(RColorBrewer)
library(leaflet)
library(maptools)
library(sp)
library(raster)
library(plotly)
library(openxlsx)
tmp19 <- readRDS("2020-06-19_Rt_drs.rds")
tmp19 <- readRDS("../Rt_regsaude/2020-06-19_Rt_drs.rds")
tmp20 <- readRDS("../Rt_regsaude/2020-06-20_Rt_drs.rds")
tmp21 <- readRDS("../Rt_regsaude/2020-06-21_Rt_drs.rds")
View(tmp19)
View(tmp19$Rt_date)
View(tmp20$Rt_date)
View(tmp21$Rt_date)
shiny::runApp()
runApp()
# lendo os dados das RSs em SpatialPolygonsDataFrame
mun_rs <- readRDS("../Rt_regsaude/mun_rs_shp.rds")
file_names <- list.files("../Rt_regsaude") %>% substring(1,10)
file_names <- file_names[which(file_names!="mun_rs_shp")]
num_files <- length(file_names) + 1
max(file_names)
min(file_names)
runApp()
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
estim_drs_df <- readRDS(paste("../Rt_regsaude/",
max(file_names),"_Rt_drs.rds",sep=""))
estim_drs_df <- left_join(estim_drs_df$Rt_date,estim_drs_df$estado_nomDRS,
by="codDRS")
getwd()
setwd("~/Documents/COVID-19/Covid_SIRD/Mapa_RS/shiny")
max(file_names)
min(file_names)
runApp('../shiny/')
paste("../Rt_regsaude/",input$dateuser,"_Rt_drs.rds",sep="")
runApp()
tmp = function(x) return(x,x+1,x+2)
tmp(1)
tmp = function(x) return(list(x,x+1,x+2))
tmp(1)
c(tmp1,tmp2,tmp3) <- tmp(1)
tmp1=tmp2=tmp3=0
c(tmp1,tmp2,tmp3) <- tmp(1)
runApp('../shiny/')
runApp('../shiny/')
runApp('../shiny/')
max(file_names)
runApp('../shiny/')
runApp()
runApp('../shiny/')
runApp('../shiny/')
runApp('../shiny/')
runApp('../shiny/')
runApp('../shiny/')
runApp()
runApp('../shiny/')
tmp(1)
tmp(1)$x
tmp$x
runApp('../shiny/')
runApp()
runApp()
qnorm(.5)
qnorm(.01)
qnorm(.99)
qnorm(0.6/(1.4/sqrt(89)))
1 - pnorm(0.6/(1.4/sqrt(89)))
pnorm(0.6/(1.4/sqrt(89)))
0.6/(1.4/sqrt(89))
0.6/(1.4/sqrt(25))
1 - pnorm(0.6/(1.4/sqrt(25)))
0.6/(1.4/sqrt(64))
1 - pnorm(0.6/(1.4/sqrt(64)))
(1.4^2)*(1/64 + 1/25)
1 - pnorm(.22/.109025)
1 - pnorm(.22/sqrt(.109025))
runApp()
runApp()
runApp()
View(tmp19$Rt_date)
tmp20$Rt_date %>% filter(!(codDRS %>% tmp19$Rt_date$codDRS))
setdiff(tmp20$Rt_date$codDRS,tmp19$Rt_date$codDRS)
setdiff(tmp21$Rt_date$codDRS,tmp20$Rt_date$codDRS)
tmp21$estado_nomDRS[codDRS=="51009"]
tmp21$estado_nomDRS %>% filter(codDRS=="51009")
tmp21$estado_nomDRS %>% filter(codDRS %in% c("51010", "31068", "31071",
"31082", "31088", "11007"))
tmp21$estado_nomDRS %>% filter(codDRS %in% c("51010", "31068", "31071",
"31082", "31088", "11007",
"51009"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?empty_plotly
?plotly_empty
plotly_empty()
plotly_empty(data=NULL)
plotly_empty(data=0)
plotly_empty(data=c(0,0))
plotly_empty(data=estim_drs_df)
plotly_empty(data.frame(c(0,0)))
plotly_empty(data=estim_drs_df,x=~date,y~Rt)
ggplot() + theme_void()
ggplot() + theme_void()
p <- ggplot() + theme_void()
ggplotly(p)
p <- ggplot() + theme_void() + theme_light()
ggplotly(p)
runApp()
tmp <- try(log(1))
tmp
tmp <- try(log(0))
tmp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
