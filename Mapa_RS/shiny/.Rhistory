data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=data_of_click$clickedMarker$id
if(is.null(my_place)){my_place="place1"}
if(my_place=="place1"){
plot(rnorm(1000), col=rgb(0.9,0.4,0.1,0.3), cex=3, pch=20)
}else{
barplot(rnorm(10), col=rgb(0.1,0.4,0.9,0.3))
}
})
}
ui <- fluidPage(
br(),
column(8,leafletOutput("map", height="600px")),
column(4,br(),br(),br(),br(),plotOutput("plot", height="300px")),
br()
)
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
server <- function(input, output) {
# build data with 2 places
data=data.frame(x=c(130, 128), y=c(-22,-26), id=c("place1", "place2"))
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
# Leaflet map with 2 markers
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=131 , lat =-25, zoom=4) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(data=data, ~x , ~y, layerId=~id, popup=~id, radius=8 , color="black",  fillColor="red", stroke = TRUE, fillOpacity = 0.8)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=data_of_click$clickedMarker$id
if(is.null(my_place)){my_place="place1"}
if(my_place=="place1"){
plot(rnorm(1000), col=rgb(0.9,0.4,0.1,0.3), cex=3, pch=20)
}else{
barplot(rnorm(10), col=rgb(0.1,0.4,0.9,0.3))
}
})
output$comando=renderPrint({
my_place=data_of_click$clickedMarker$id
if(is.null(my_place)){my_place="place1"}
print(my_place)
})
}
ui <- fluidPage(
br(),
column(8,leafletOutput("map", height="600px")),
column(4,br(),br(),br(),br(),plotOutput("plot", height="300px")),
br()
)
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
server <- function(input, output) {
# build data with 2 places
data=data.frame(x=c(130, 128), y=c(-22,-26), id=c("place1", "place2"))
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
# Leaflet map with 2 markers
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=131 , lat =-25, zoom=4) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(data=data, ~x , ~y, layerId=~id, popup=~id, radius=8 , color="black",  fillColor="red", stroke = TRUE, fillOpacity = 0.8)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=data_of_click$clickedMarker$id
if(is.null(my_place)){my_place="place1"}
if(my_place=="place1"){
plot(rnorm(1000), col=rgb(0.9,0.4,0.1,0.3), cex=3, pch=20)
}else{
barplot(rnorm(10), col=rgb(0.1,0.4,0.9,0.3))
}
})
output$comando=renderPrint({
my_place=data_of_click$clickedMarker$id
if(is.null(my_place)){my_place="place1"}
print(my_place)
})
}
ui <- fluidPage(
br(),
column(8,leafletOutput("map", height="600px")),
column(4,plotOutput("plot", height="300px")),
br(),
column(4,verbatimTextOutput("comando")),
br()
)
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
server <- function(input, output) {
# build data with 2 places
data=data.frame(x=c(130, 128), y=c(-22,-26), id=c("place1", "place2"))
# create a reactive value that will store the click position
data_of_click <- reactiveValues(clickedMarker=NULL)
# Leaflet map with 2 markers
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=131 , lat =-25, zoom=4) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(data=data, ~x , ~y, layerId=~id, popup=~id, radius=8 , color="black",  fillColor="red", stroke = TRUE, fillOpacity = 0.8)
})
# store the click
observeEvent(input$map_marker_click,{
data_of_click$clickedMarker <- input$map_marker_click
})
# Make a barplot or scatterplot depending of the selected point
output$plot=renderPlot({
my_place=data_of_click$clickedMarker$id
if(is.null(my_place)){my_place="place1"}
if(my_place=="place1"){
plot(rnorm(1000), col=rgb(0.9,0.4,0.1,0.3), cex=3, pch=20)
}else{
barplot(rnorm(10), col=rgb(0.1,0.4,0.9,0.3))
}
})
output$comando=renderPrint({
my_place=data_of_click$clickedMarker$id
if(is.null(my_place)){my_place="place1"}
print(my_place)
print(data_of_click$clickedMarker)
})
}
ui <- fluidPage(
br(),
column(8,leafletOutput("map", height="600px")),
column(4,plotOutput("plot", height="300px")),
br(),
column(4,verbatimTextOutput("comando")),
br()
)
shinyApp(ui = ui, server = server)
runApp('./shiny')
x=coordinates(mun_rs)[,1]
y=coordinates(mun_rs)[,2]
id=mun_rs$codDRS
head(x)
head(y)
head(id)
runApp('./shiny')
runApp('./shiny')
runApp('./teste')
runApp('./shiny')
runApp('./shiny')
runApp('./shiny')
runApp('./shiny')
runApp('./teste')
runApp('./teste')
runApp('./shiny')
runApp('./teste')
runApp('./teste')
runApp('./teste')
runApp('./shiny')
class(mun_rs$codDRS[1])
runApp('./shiny')
runApp('./shiny')
mun <- readRDS("../dados_por_municipio.rds")
mun <- readRDS("../dados_por_municipio.rds")
setwd("~/Downloads/Mapa_RS/shiny")
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, Data,confirmed,
deaths,recovered, Populacao_estimada, IDHM)
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, Data,confirmed,
deaths,recovered, Populacao_estimada, IDHM)
pacote("tidyverse")
pacote("lubridate")
pacote <- function(p){
if (!is.element(p, installed.packages()[,1])){
message('Pacote ',p,' nao encontrado. Instalando..')
install.packages(p, dep = TRUE)
}
message('Carregando pacote ',p)
require_worked <- try(require(p, character.only = TRUE))
if(!require_worked) {
install.packages(p, dep = TRUE)
}
}
pacote("tidyverse")
pacote("lubridate")
pacote("writexl")
pacote("httr")
pacote("readr")
pacote("readxl")
pacote("plotly")
pacote("stringi")
pacote("fdANOVA")
#********************#
# Funcoes definidas
gaussian_kernel <- function(x) {
(1 / (sqrt(2 * pi))) * exp(-(x^2/2))
}
# Estimador por Kernel
calcula_estimador <- function(t_range, k_range, vetor_x, vetor_y, H) {
out_ <- rep(NA, t_range)
for(t in 1:t_range) {
numerador <- 0
denominador <- 0
for(k in 1:k_range) {
numerador <- numerador + gaussian_kernel((t - k)/H) * vetor_y[k] * vetor_x[k]
denominador <- denominador + gaussian_kernel((t - k)/H) * vetor_x[k] * vetor_x[k]
}
out_[t] <- numerador/denominador
}
return(out_)
}
estima_parametros <- function(dados, populacao, caso_corte = 50, kc = 1, kd = 1, kr = 1, expoente_H = 0.3,
recuperados_sintetico = TRUE) {
y <- (dados %>% dplyr::select(r = recovered, d = deaths, c = confirmed) %>% as.matrix)
linha_corte <- which(y[,"c"] >= caso_corte)[1]
N <- populacao
n <- nrow(y) - linha_corte
H <- n^expoente_H
dt <- y[,"d"]/kd # dead
ct <- y[,"c"]/kc # confirmed
st <- N - ct # susceptible
# recovered
if(recuperados_sintetico) {
# recuperados hoje := confirmados 14 atrás menos o numero de mortos hoje
rt <- dplyr::lag(ct, 14) - dt
rt <- ifelse(is.na(rt), 0, rt)
} else {
rt <- y[,"r"]/kr
}
# infected
xt <- ct - dt - rt
dt <- dt[linha_corte:(n+linha_corte)] # dead
st <- st[linha_corte:(n+linha_corte)] # susceptible
xt <- xt[linha_corte:(n+linha_corte)] # infected
rt <- rt[linha_corte:(n+linha_corte)] # recovered
ct <- ct[linha_corte:(n+linha_corte)] # confirmed
delta_dt <- diff(dt)
delta_rt <- diff(rt)
delta_xt <- diff(xt)
delta_st <- diff(st)
mu_est <- calcula_estimador(n, n, xt[-length(xt)], delta_dt, H)
mu_est <- pmin(pmax(mu_est, 1/21 * 0.06), 1/7 * 0.06)
mu_est_fixo <- rep(1/14 * 0.06, n)
mu_est <- 0.75 * mu_est_fixo + 0.25 * mu_est
#mu_est <- mu_est_fixo
nu_est <- calcula_estimador(n, n, xt[-length(xt)], delta_rt, H)
nu_est <- pmin(pmax(nu_est, 1/28 * 0.94), 1/7 * 0.94)
nu_est_fixo <- rep(1/14 * 0.94, n)
nu_est <- 0.75 * nu_est_fixo + 0.25 * nu_est
#nu_est <- nu_est_fixo
beta_est <- - calcula_estimador(n, n, xt[-length(xt)] * st[-length(st)]/N, delta_st, H)
beta_est <- ifelse(beta_est < 0, 0, beta_est)
R_e <- beta_est / (mu_est + nu_est) * st[-length(st)]/N
nu_ocorrido <- delta_rt/xt[-length(xt)]
mu_ocorrido <- delta_dt/xt[-length(xt)]
beta_ocorrido <- (delta_xt + delta_rt)/xt[-length(xt)]
R_ocorrido <- beta_ocorrido / (mu_ocorrido + nu_ocorrido) * st[-length(st)]/N
return(list(nu_t = nu_est,
beta_t = beta_est,
mu_t = mu_est,
R_e = R_e,
nu_ocorrido = nu_ocorrido,
mu_ocorrido = mu_ocorrido,
beta_ocorrido = beta_ocorrido,
R_ocorrido = R_ocorrido,
xt = xt,
rt = rt,
st = st,
dt = dt,
ct = ct,
primeira_data = first(dados$Data),
datas = dados$Data[linha_corte:(n+linha_corte)][-length(dados$Data[linha_corte:(n+linha_corte)])]
))
}
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, Data,confirmed,
deaths,recovered, Populacao_estimada, IDHM)
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, Data,confirmed,
deaths,recovered, Populacao_estimada, IDHM)
# quartis de IDHM para todos os municípios do Brasil
quartis_idhm <- mun %>%
group_by(Estado,Município) %>% dplyr::distinct(IDHM)
quartis_idhm <- tibble(Q1 = quantile(quartis_idhm$IDHM,.25)[[1]],
Q2 = quantile(quartis_idhm$IDHM,.5)[[1]],
Q3 = quantile(quartis_idhm$IDHM,.75)[[1]])
# checando os grupos de IDHM dos Municípios
mun <- mun %>% mutate(grupIDHM = NA)
tmp <- mun %>% select(Estado,Município) %>% distinct()
for(i in 1:nrow(tmp)){
# grupo do IDHM
tmp2 <- mun %>% filter(Estado==tmp[i,]$Estado,Município==tmp[i,]$Município) %>%
dplyr::summarise(grupIDHM = ifelse(unique(IDHM)<quartis_idhm$Q1,"D",
ifelse(unique(IDHM)<quartis_idhm$Q2,"C",
ifelse(unique(IDHM)<quartis_idhm$Q3,"B","A"))))
# alterando valores das variáveis que indicam o grupo do IDHM municipal
tmp4 <- which(mun$Estado==tmp[i,]$Estado & mun$Município==tmp[i,]$Município)
mun$grupIDHM[tmp4] <- tmp2$grupIDHM
}
# Classificação e Caracterização dos Espaços Rurais e Urbanos do Brasil
urbanizacao <- read_excel("../Grau_de_urbanizacao.xlsx", guess_max = 100000,
col_names = TRUE,sheet = 2) %>%
dplyr::select(Estado = NM_UF, Município = NM_MUN, Codigo = CD_GCMUN,
pop_area_densa = POP_AREA_DENSA,
pop_area_nao_densa = POP_AREA_NAO_DENSA,
pop_total = POP_TOTAL_UNID_POP, grau_urb = GR_URB,
classe_urb = CLASSES)
# renomeando as classes de urbanização
urbanizacao <- urbanizacao %>%
mutate(classe_urb = ifelse(classe_urb=="Unidade populacional com moderado grau de urbanizacao","moderado",
ifelse(classe_urb=="Unidade populacional com alto grau de urbanizacao","alto","baixo")))
# eliminando o último dígito do código nesses dados do IBGE, para deixar ele
# com 6 dígitos, como está nos dados do Ministério da Saúde
urbanizacao <- urbanizacao %>% mutate(Codigo = str_sub(as.character(Codigo), start = 1,end = 6))
# tirando acentos e deixando em caixa alta os nomes dos estados
urbanizacao <- urbanizacao %>% mutate(Estado = stri_trans_general(str = Estado,
id = "Latin-ASCII")) %>%
mutate(Estado = stri_trans_general(str = Estado,
id = "upper"))
mun %>% select(Codigo) %>% distinct() %>% dim()
urbanizacao %>% select(Codigo) %>% distinct() %>% dim()
# número de municípios em urbanizacao que não estão em mun
urbanizacao %>% select(Estado,Município,Codigo) %>%
filter(!(Codigo %in% mun$Codigo)) %>% distinct() %>% dim()
# adicionando os dados sobre urbanização dos municípios ao dataframe mun
mun <- mun %>% group_by(Estado,Codigo) %>%
dplyr::inner_join(urbanizacao %>% select(-Município),
by=c("Estado","Codigo")) %>%
ungroup()
rm(urbanizacao)
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% group_by(Estado,Data,codDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada),
pop_area_densa = sum(pop_area_densa),
pop_area_nao_densa = sum(pop_area_nao_densa)
) %>% ungroup %>% arrange(Estado,codDRS)
tmp <- mun %>% select(codDRS) %>% distinct()
drs <- drs %>% mutate(drs_idhm = NA, dsem_epd = NA, classe_urb = NA)
for(i in 1:nrow(tmp)){
# grupo do IDHM
tmp2 <- mun %>% filter(codDRS==tmp[i,]$codDRS) %>% group_by(Município) %>%
select(Município, grupIDHM) %>% distinct()
# vetor com dias epidemiológicos
tmp3 <- drs %>% filter(codDRS==tmp[i,]$codDRS) %>%
select(confirmed)
tmp3 <- which(tmp3$confirmed >= caso_corte)
# checando a classe de urbanização da DRS
tmp5 <- drs %>% filter(codDRS==tmp[i,]$codDRS) %>%
select(pop_area_densa,pop_area_nao_densa) %>% distinct()
tmp5 <- tmp5$pop_area_densa/(tmp5$pop_area_densa + tmp5$pop_area_nao_densa)
# adicionando esses dados ao dataframe drs
tmp4 <- which(drs$codDRS==tmp[i,]$codDRS)
drs$drs_idhm[tmp4] <- names(which.max(table(tmp2$grupIDHM)))
drs$dsem_epd[tmp4] <- ifelse(is.na(tmp3) || length(tmp3)<15,FALSE,TRUE)
drs$classe_urb[tmp4] <- ifelse(tmp5>.75,"alto",ifelse(tmp5>.5,"moderado","baixo"))
}
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
tmp <- mun %>% select(codDRS) %>% distinct()
drs <- drs %>% mutate(drs_idhm = NA, dsem_epd = NA, classe_urb = NA)
for(i in 1:nrow(tmp)){
# grupo do IDHM
tmp2 <- mun %>% filter(codDRS==tmp[i,]$codDRS) %>% group_by(Município) %>%
select(Município, grupIDHM) %>% distinct()
# vetor com dias epidemiológicos
tmp3 <- drs %>% filter(codDRS==tmp[i,]$codDRS) %>%
select(confirmed)
tmp3 <- which(tmp3$confirmed >= caso_corte)
# checando a classe de urbanização da DRS
tmp5 <- drs %>% filter(codDRS==tmp[i,]$codDRS) %>%
select(pop_area_densa,pop_area_nao_densa) %>% distinct()
tmp5 <- tmp5$pop_area_densa/(tmp5$pop_area_densa + tmp5$pop_area_nao_densa)
# adicionando esses dados ao dataframe drs
tmp4 <- which(drs$codDRS==tmp[i,]$codDRS)
drs$drs_idhm[tmp4] <- names(which.max(table(tmp2$grupIDHM)))
drs$dsem_epd[tmp4] <- ifelse(is.na(tmp3) || length(tmp3)<15,FALSE,TRUE)
drs$classe_urb[tmp4] <- ifelse(tmp5>.75,"alto",ifelse(tmp5>.5,"moderado","baixo"))
}
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
for(i in 1:dim(EstDRS)[1]){
dados_drs <- drs %>% filter(codDRS==EstDRS$codDRS[i])
# checando se a DRS possui duas semanas epidemiológicas
if(unique(dados_drs$dsem_epd)){
tmp <- estima_parametros(dados_drs,
populacao = dados_drs$populacao[1],
caso_corte = caso_corte,
expoente_H = 0.3,
recuperados_sintetico = TRUE)[c("nu_t", "beta_t",
"mu_t", "R_e",
"datas")] %>%
lapply(function(x) tail(x,14))
estimadores_drs[[i]] <- append(tmp,list(Estado = rep(EstDRS$Estado[i],14),
codDRS = rep(EstDRS$codDRS[i],14)))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
# número de dias epidemiológicos
num_dias <- 21
for(i in 1:dim(EstDRS)[1]){
dados_drs <- drs %>% filter(codDRS==EstDRS$codDRS[i])
linha_corte <- which(dados_drs$confirmed >= caso_corte)
# checando se a DRS possui duas semanas epidemiológicas
if(!(is.na(linha_corte[1]) | length(linha_corte)<(num_dias+1))){
tmp <- estima_parametros(dados_drs,
populacao = dados_drs$populacao[1],
caso_corte = caso_corte,
expoente_H = 0.3,
recuperados_sintetico = TRUE)[c("nu_t", "beta_t",
"mu_t", "R_e",
"datas")] %>%
lapply(function(x) tail(x,num_dias))
estimadores_drs[[i]] <- append(tmp,
list(Estado = rep(EstDRS$Estado[i],num_dias),
codDRS = rep(EstDRS$codDRS[i],num_dias)))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp == 7)], as.data.frame)
estim_drs_df <- do.call("rbind",tmp2)
estim_drs_df <- mutate(estim_drs_df, Data=estim_drs_df$datas) %>%
select(-datas)
estim_drs_df <- dplyr::left_join(estim_drs_df,drs,by=c("Estado","codDRS","Data")) %>%
tibble
#View(estim_mun_df)
rm(EstDRS); rm(estimadores_drs)
View(estim_drs_df)
saveRDS(estim_drs_df, "curvas_drs_df.rds")
tmp <- mun_rs$codDRS %in% estim_drs_df$codDRS
tmp[1:5]
tmp <- mun_rs %>% filter(codDRS %in% estim_drs_df$codDRS)
tmp <- mun_rs$codDRS %in% estim_drs_df$codDRS
tmp[1:5]
tmp[1:10]
mun_rs$codDRS[5]
"11005" %>% estim_drs_df$codDRS
"11005" %in% estim_drs_df$codDRS
mun_rs$codDRS[4]
"11004" %in% estim_drs_df$codDRS
codDRS_tem_curva <- mun_rs$codDRS %in% estim_drs_df$codDRS
runApp('../shiny/')
dim(mun_rs)
tmp <- mun_rs[codDRS_tem_curva,]
tmp = 0
runApp('../shiny/')
estim_drs_df$codDRS[1]
tmp <- estim_drs_df %>% mutate(codDRS = as.factor(codDRS))
tmp$codDRS[1]
tmp <- estim_drs_df %>% mutate(codDRS = as.character(codDRS))
tmp$codDRS[1]
runApp('../shiny/')
# popup com nome do estado e da RS
state_popup <- paste0("<strong>Estado: </strong>",
mun_rs$Estado,
"<br><strong>RS: </strong>",
mun_rs$nomDRS)
runApp('../shiny/')
