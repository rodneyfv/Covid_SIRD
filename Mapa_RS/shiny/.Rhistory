source("./time_varying_SIRD-master/load_packages.R")
source("./time_varying_SIRD-master/gaussian_kernel.R")
source("./time_varying_SIRD-master/estimator_calculation.R")
source("./time_varying_SIRD-master/run_SIRD.R")
library("stringi")
library("fdANOVA")
mun <- readRDS("./dados_por_municipio.rds")
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada)
View(mun)
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% group_by(Estado,date,codDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada),
pop_area_densa = sum(pop_area_densa),
pop_area_nao_densa = sum(pop_area_nao_densa)
) %>% ungroup %>% arrange(Estado,codDRS)
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% group_by(Estado,date,codDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada)
) %>% ungroup %>% arrange(Estado,codDRS)
View(drs)
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
for(i in 1:dim(EstDRS)[1]){
dados_drs <- drs %>% filter(codDRS==EstDRS$codDRS[i])
linha_corte <- which(dados_drs$confirmed >= caso_corte)
# checando se a DRS possui pelo menos duas semanas epidemiológicas
if(!(is.na(linha_corte[1]) | length(linha_corte)<14)){
tmp <- run_SIRD(df = dados_drs,
size_population = dados_drs$populacao[1],
minimum_number_cases = caso_corte,
kc = 1, kd = 1, kr = 1, power_H = 0.4,
recovered_synthetic = TRUE, remove_last = 6)[c("nu_hat", "beta_hat",
"mu_hat", "Rt")]
# númerode dias para os quais temos estimativas
num_dias <- length(tmp$beta_hat)
# vetor com as datas referentes às estimativas
tmp2 <- names(tmp$beta_hat)
estimadores_drs[[i]] <- append(tmp,
list(Estado = rep(EstDRS$Estado[i],num_dias),
codDRS = rep(EstDRS$codDRS[i],num_dias),
date=tmp2))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
table(tmp)
#table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp == 7)], as.data.frame)
estim_drs_df <- do.call("rbind",tmp2)
estim_drs_df <- dplyr::mutate(estim_drs_df,date = as.Date(date))
estim_drs_df <- dplyr::left_join(estim_drs_df,drs,by=c("Estado","codDRS","date")) %>%
tibble
View(estim_drs_df)
mun %>% group_by(codDRS) %>% summarise(n = n()) %>% dim()
mun %>% group_by(nomDRS) %>% summarise(n = n()) %>% dim()
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% group_by(Estado,date,codDRS,nomDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada)
) %>% ungroup %>% arrange(Estado,codDRS)
View(drs)
View(drs)
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
for(i in 1:dim(EstDRS)[1]){
dados_drs <- drs %>% filter(codDRS==EstDRS$codDRS[i])
linha_corte <- which(dados_drs$confirmed >= caso_corte)
# checando se a DRS possui pelo menos duas semanas epidemiológicas
if(!(is.na(linha_corte[1]) | length(linha_corte)<14)){
# tmp <- run_SIRD(df = dados_drs,
#                 size_population = dados_drs$populacao[1],
#                 minimum_number_cases = caso_corte,
#                 kc = 1, kd = 1, kr = 1, power_H = 0.4,
#                 recovered_synthetic = TRUE, remove_last = 6)[c("nu_hat", "beta_hat",
#                                                          "mu_hat", "Rt")]
tmp <- run_SIRD(df = dados_drs,
size_population = dados_drs$populacao[1],
minimum_number_cases = caso_corte,
kc = 1, kd = 1, kr = 1, power_H = 0.4,
recovered_synthetic = TRUE, remove_last = 6)[c("Rt")]
# númerode dias para os quais temos estimativas
num_dias <- length(tmp$Rt)
# vetor com as datas referentes às estimativas
tmp2 <- names(tmp$Rt)
estimadores_drs[[i]] <- append(tmp,
list(Estado = rep(EstDRS$Estado[i],num_dias),
codDRS = rep(EstDRS$codDRS[i],num_dias),
date=tmp2))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
#table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp == 7)], as.data.frame)
table(tmp)
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
#table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp > 2)], as.data.frame)
estim_drs_df <- do.call("rbind",tmp2)
estim_drs_df <- dplyr::mutate(estim_drs_df,date = as.Date(date))
estim_drs_df <- dplyr::left_join(estim_drs_df,drs,by=c("Estado","codDRS","date")) %>%
tibble
#View(estim_mun_df)
rm(EstDRS); rm(estimadores_drs)
tmp <- estim_drs_df %>% select(Rt,date,Estado,codDRS,nomDRS)
View(tmp)
object.size(tmp)
?object.size
object.size(tmp,units='Kb')
object.size(tmp,units="Kb")
object.size(tmp,units="legacy")
object.size(tmp,standard="legacy")
object.size(tmp,units="auto")
object.size(tmp)
object.size(tmp)/1024
tmp <- estim_drs_df %>% select(Rt,date,codDRS)
object.size(tmp)/1024
tmp <- estim_drs_df %>% select(Rt,date,Estado,codDRS,nomDRS)
tmp1 <- estim_drs_df %>% select(Rt,date,Estado,codDRS,nomDRS)
tmp2 = list(l1=tmp,l2=tmp1)
tmp <- estim_drs_df %>% select(Rt,date,codDRS)
tmp1 <- estim_drs_df %>% select(Estado,codDRS,nomDRS) %>% distinct()
tmp2 = list(l1=tmp,l2=tmp1)
object.size(tmp2)/1024
tmp3 = left_join(tmp2$l1,tmp2$l2)
tmp3 = left_join(tmp2$l1,tmp2$l2,by="codDRS")
View(tmp3)
View(tmp2$l2)
tmp <- estim_drs_df %>% select(Rt,date,codDRS)
tmp1 <- estim_drs_df %>% select(Estado,codDRS,nomDRS) %>% distinct()
estim_drs_df = list(Rt_date=tmp,estado_nomDRS=tmp1)
object.size(estim_drs_df)/1024
tmp3 = left_join(estim_drs_df$Rt_date,estim_drs_df$estado_nomDRS,by="codDRS")
View(mun)
mun <- readRDS("../dados_por_municipio.rds")
colnames(mun)
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada)
source("./time_varying_SIRD-master/load_packages.R")
source("./time_varying_SIRD-master/gaussian_kernel.R")
source("./time_varying_SIRD-master/estimator_calculation.R")
source("./time_varying_SIRD-master/run_SIRD.R")
library("stringi")
library("fdANOVA")
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada)
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% group_by(Estado,date,codDRS,nomDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada)
) %>% ungroup %>% arrange(Estado,codDRS)
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
for(i in 1:dim(EstDRS)[1]){
dados_drs <- drs %>% filter(codDRS==EstDRS$codDRS[i])
linha_corte <- which(dados_drs$confirmed >= caso_corte)
# checando se a DRS possui pelo menos duas semanas epidemiológicas
if(!(is.na(linha_corte[1]) | length(linha_corte)<14)){
tmp <- run_SIRD(df = dados_drs,
size_population = dados_drs$populacao[1],
minimum_number_cases = caso_corte,
kc = 1, kd = 1, kr = 1, power_H = 0.4,
recovered_synthetic = TRUE, remove_last = 6)[c("Rt")]
# númerode dias para os quais temos estimativas
num_dias <- length(tmp$Rt)
# vetor com as datas referentes às estimativas
tmp2 <- names(tmp$Rt)
estimadores_drs[[i]] <- append(tmp,
list(Estado = rep(EstDRS$Estado[i],num_dias),
codDRS = rep(EstDRS$codDRS[i],num_dias),
date=tmp2))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
table(tmp)
#table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp > 2)], as.data.frame)
estim_drs_df <- do.call("rbind",tmp2)
estim_drs_df <- dplyr::mutate(estim_drs_df,date = as.Date(date))
estim_drs_df <- dplyr::left_join(estim_drs_df,drs,by=c("Estado","codDRS","date")) %>%
tibble
#View(estim_mun_df)
rm(EstDRS); rm(estimadores_drs)
View(estim_drs_df)
Sys.Date()
paste(Sys.Date(),"Rt_drs.rds")
paste(Sys.Date(),"Rt_drs.rds",sep="")
paste(Sys.Date(),"_Rt_drs.rds",sep="")
paste(Sys.Date(),"_Rt_drs.rds",sep="")
?saveRDS
paste(Sys.Date(),"_Rt_drs.rds",sep="")
paste("./Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep="")
saveRDS(estim_drs_df,
paste("./Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep=""))
setwd("~/Documents/COVID-19/Covid_SIRD/Mapa_RS/shiny")
# lendo os dados das RSs em SpatialPolygonsDataFrame
mun_rs <- readRDS("../Rt_regsaude/mun_rs_shp.rds")
# a variável código precisa ser caractere pra não dar
# problema quando for usada como id pra identificar cliques
mun_rs$codDRS <- as.character(mun_rs$codDRS)
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
estim_drs_df <- readRDS("../Rt_regsaude/curvas_drs_df.rds")
# deixamos o código das RSs aqui também para poder compara
# com os códigos em mun_rs
estim_drs_df <- estim_drs_df %>% mutate(codDRS = as.character(codDRS))
paste("./Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep="")
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
tmp <- paste("./Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep="")
tmp
estim_drs_df <- readRDS(tmp)
estim_drs_df <- readRDS("./Rt_regsaude/2020-06-19_Rt_drs.rds")
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
tmp <- paste("../Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep="")
estim_drs_df <- readRDS(tmp)
# deixamos o código das RSs aqui também para poder compara
# com os códigos em mun_rs
estim_drs_df <- estim_drs_df %>% mutate(codDRS = as.character(codDRS))
# checando para quais DRs temos curvas estimadas e
# deixando só estas no spatialdataframe
codDRS_tem_curva <- mun_rs$codDRS %in% estim_drs_df$codDRS
mun_rs <- mun_rs[codDRS_tem_curva,]
# variável com texto com nome do estado e da RS, para
# ser usada na popup do mapa
state_popup <- paste0("<strong>Estado: </strong>",
mun_rs$Estado,
"<br><strong>RS: </strong>",
mun_rs$nomDRS)
library('../shiny/')
library(shiny)
runApp('../shiny/')
runApp('../shiny/')
setwd("~/Documents/COVID-19/Covid_SIRD/Mapa_RS/shiny")
library(pacman)
# Carregando os pacotes
library(rgdal)
library(dplyr)
library(tidyverse)
library(stringi)
library(RColorBrewer)
library(leaflet)
library(maptools)
library(sp)
library(raster)
library(plotly)
# lendo os dados das RSs em SpatialPolygonsDataFrame
mun_rs <- readRDS("../Rt_regsaude/mun_rs_shp.rds")
# a variável código precisa ser caractere pra não dar
# problema quando for usada como id pra identificar cliques
mun_rs$codDRS <- as.character(mun_rs$codDRS)
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
tmp <- paste("../Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep="")
estim_drs_df <- readRDS(tmp)
estim_drs_df <- left_join(estim_drs_df$Rt_date,estim_drs_df$estado_nomDRS,
by="codDRS")
paste("../Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep="")
View(estim_drs_df)
source("./time_varying_SIRD-master/load_packages.R")
source("./time_varying_SIRD-master/gaussian_kernel.R")
source("./time_varying_SIRD-master/estimator_calculation.R")
setwd("~/Documents/COVID-19/Covid_SIRD/Mapa_RS")
source("./time_varying_SIRD-master/load_packages.R")
source("./time_varying_SIRD-master/gaussian_kernel.R")
source("./time_varying_SIRD-master/estimator_calculation.R")
source("./time_varying_SIRD-master/run_SIRD.R")
library("stringi")
library("fdANOVA")
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada)
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% dplyr::select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada)
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% dplyr::group_by(Estado,date,codDRS,nomDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada)
) %>% dplyr::ungroup %>% dplyr::arrange(Estado,codDRS)
source("./time_varying_SIRD-master/load_packages.R")
source("./time_varying_SIRD-master/gaussian_kernel.R")
source("./time_varying_SIRD-master/estimator_calculation.R")
source("./time_varying_SIRD-master/run_SIRD.R")
library("stringi")
library("fdANOVA")
mun <- readRDS("../dados_por_municipio.rds")
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% dplyr::select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada)
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% dplyr::group_by(Estado,date,codDRS,nomDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada)
) %>% ungroup %>% arrange(Estado,codDRS)
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
for(i in 1:dim(EstDRS)[1]){
dados_drs <- drs %>% filter(codDRS==EstDRS$codDRS[i])
linha_corte <- which(dados_drs$confirmed >= caso_corte)
# checando se a DRS possui pelo menos duas semanas epidemiológicas
if(!(is.na(linha_corte[1]) | length(linha_corte)<14)){
tmp <- run_SIRD(df = dados_drs,
size_population = dados_drs$populacao[1],
minimum_number_cases = caso_corte,
kc = 1, kd = 1, kr = 1, power_H = 0.4,
recovered_synthetic = TRUE, remove_last = 6)[c("Rt")]
# númerode dias para os quais temos estimativas
num_dias <- length(tmp$Rt)
# vetor com as datas referentes às estimativas
tmp2 <- names(tmp$Rt)
estimadores_drs[[i]] <- append(tmp,
list(Estado = rep(EstDRS$Estado[i],num_dias),
codDRS = rep(EstDRS$codDRS[i],num_dias),
date=tmp2))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
#table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp > 2)], as.data.frame)
estim_drs_df <- do.call("rbind",tmp2)
estim_drs_df <- dplyr::mutate(estim_drs_df,date = as.Date(date))
estim_drs_df <- dplyr::left_join(estim_drs_df,drs,by=c("Estado","codDRS","date")) %>%
tibble
#View(estim_mun_df)
rm(EstDRS); rm(estimadores_drs)
# deixamos o código das RSs aqui também para poder compara
# com os códigos em mun_rs
estim_drs_df <- estim_drs_df %>% mutate(codDRS = as.character(codDRS))
View(estim_drs_df)
# salvando os dados num formato que economiza mais espaço que
# o dataframe completo
tmp <- estim_drs_df %>% dplyr::select(Rt,date,codDRS)
tmp1 <- estim_drs_df %>% dplyr::select(Estado,codDRS,nomDRS) %>% distinct()
View(tmp)
View(tmp1)
estim_drs_df = list(Rt_date=tmp,estado_nomDRS=tmp1)
View(estim_drs_df)
tmp = left_join(estim_drs_df$Rt_date,estim_drs_df$estado_nomDRS,by="codDRS")
View(tmp)
saveRDS(estim_drs_df,
paste("./Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep=""))
setwd("~/Documents/COVID-19/Covid_SIRD/Mapa_RS/shiny")
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
estim_drs_df <- readRDS(paste("../Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep=""))
View(estim_drs_df)
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
estim_drs_df <- readRDS(paste("../Rt_regsaude/",
Sys.Date(),"_Rt_drs.rds",sep="")) %>%
left_join(estim_drs_df$Rt_date,estim_drs_df$estado_nomDRS,
by="codDRS")
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
estim_drs_df <- readRDS(paste("../Rt_regsaude/",
Sys.Date(),"_Rt_drs.rds",sep="")) %>%
estim_drs_df <- left_join(estim_drs_df$Rt_date,estim_drs_df$estado_nomDRS,
by="codDRS")
estim_drs_df
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
estim_drs_df <- readRDS(paste("../Rt_regsaude/",
Sys.Date(),"_Rt_drs.rds",sep=""))
estim_drs_df <- left_join(estim_drs_df$Rt_date,estim_drs_df$estado_nomDRS,
by="codDRS")
View(estim_drs_df)
library('../shiny/')
library(shiny)
runApp('../shiny/')
num_files <- length(list.files("../Rt_regsaude"))
num_files
num_files-2
Sys.Date()
Sys.Date()-num_files-2
num_files-2
Sys.Date()
Sys.Date()-num_files-2
Sys.Date()-0
Sys.Date()-num_files+2
runApp('../shiny/')
View(estim_drs_df)
install.packages("openxlsx")
library(openxlsx)
openxlsx::write.xlsx(estim_drs_df, file,row.names = TRUE)
openxlsx::write.xlsx(estim_drs_df, "file.xlsx",row.names = TRUE)
runApp('../shiny/')
runApp('../shiny/')
view(estim_drs_df)
myplace="12001"
estim_drs_df %>% filter(codDRS==my_place) %>%
openxlsx::write.xlsx("file.xlsx",row.names = TRUE)
my_place="12001"
estim_drs_df %>% filter(codDRS==my_place) %>%
openxlsx::write.xlsx("file.xlsx",row.names = TRUE)
runApp('../shiny/')
runApp('../shiny/')
runApp('../shiny/')
