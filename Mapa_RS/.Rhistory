# deixando Codigo como character
df_msaude <- df_msaude %>% mutate(Codigo = as.character(Codigo))
comparacao_primeiro_dia <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::filter(Data == min(Data)) %>%
dplyr::select(everything(), deaths_MS = deaths,
confirmed_MS = confirmed) %>% left_join(mun)
comparacao_primeiro_dia <- comparacao_primeiro_dia %>% dplyr::mutate(
check_confirmed = confirmed_MS - confirmed,
check_deaths = deaths_MS - deaths
)
# Verificano se os municipios que nem entraram, ate hoje, no do MSaude
# possuem um numero relevante de casos segundo Brasil.IO
mun_apenas_BrasilIO <- mun %>% dplyr::filter(!Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::group_by(Codigo) %>% dplyr::filter(Data == max(Data))  %>% dplyr::arrange(desc(confirmed))
# Dentre os municipios que estao no MS, pegando as datas anteriores
#  as disponiveis no MS
keys_fora_do_df_msaude <- anti_join(mun %>% dplyr::filter(Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::select(Codigo, Data),
df_msaude %>% dplyr::select(Codigo, Data)) %>%
left_join(mun)
# adicionando os dados de DRS referentes aos municípios neste dataframe
keys_fora_do_df_msaude <- keys_fora_do_df_msaude %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(keys_fora_do_df_msaude, df_msaude)
dados_sem_buracos <- expand.grid(Codigo = unique(dados$Codigo), Data = unique(dados$Data)) %>%
dplyr::mutate(Codigo = as.character(Codigo), Data = ymd(Data))
buracos <- anti_join(dados_sem_buracos, dados %>% dplyr::select(Codigo, Data))
# Vou substituir os buracos pelo ultimo dado. Sao poucos confirmados e
# obitos nesses casos.
if(nrow(buracos)>0){
buracos <- buracos %>% dplyr::mutate(confirmed = NA, deaths = NA)
for(i_b in 1:nrow(buracos)) {
buracos$confirmed[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(confirmed) %>% last %>% as.numeric
buracos$deaths[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(deaths) %>% last %>% as.numeric
}
# adicionando os dados de DRS referentes aos municípios neste dataframe
buracos <- buracos %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(dados, buracos) %>% dplyr::arrange(Codigo, Data)
# Check de que nao tem mais buracos:
nrow(dados) == nrow(dados_sem_buracos)
}
dados_finais <- dados %>% left_join(df_caracteristicas_fixas)
saveRDS(dados_finais, "dados_por_municipio.rds")
setwd("~/Documents/COVID-19/Covid_SIRD/Mapa_RS")
source("./time_varying_SIRD-master/load_packages.R")
source("./time_varying_SIRD-master/gaussian_kernel.R")
source("./time_varying_SIRD-master/estimator_calculation.R")
source("./time_varying_SIRD-master/run_SIRD.R")
library("stringi")
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% dplyr::select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada)
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% dplyr::group_by(Estado,date,codDRS,nomDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada)
) %>% ungroup %>% arrange(Estado,codDRS)
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
for(i in 1:dim(EstDRS)[1]){
dados_drs <- drs %>% filter(codDRS==EstDRS$codDRS[i])
linha_corte <- which(dados_drs$confirmed >= caso_corte)
# checando se a DRS possui pelo menos duas semanas epidemiológicas
if(!(is.na(linha_corte[1]) | length(linha_corte)<14)){
tmp <- run_SIRD(df = dados_drs,
size_population = dados_drs$populacao[1],
minimum_number_cases = caso_corte,
kc = 1, kd = 1, kr = 1, power_H = 0.4,
recovered_synthetic = TRUE, remove_last = 6)[c("Rt")]
# númerode dias para os quais temos estimativas
num_dias <- length(tmp$Rt)
# vetor com as datas referentes às estimativas
tmp2 <- names(tmp$Rt)
estimadores_drs[[i]] <- append(tmp,
list(Estado = rep(EstDRS$Estado[i],num_dias),
codDRS = rep(EstDRS$codDRS[i],num_dias),
date=tmp2))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
#table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp > 2)], as.data.frame)
estim_drs_df <- do.call("rbind",tmp2)
estim_drs_df <- dplyr::mutate(estim_drs_df,date = as.Date(date))
estim_drs_df <- dplyr::left_join(estim_drs_df,drs,by=c("Estado","codDRS","date")) %>%
tibble
#View(estim_mun_df)
rm(EstDRS); rm(estimadores_drs)
# deixamos o código das RSs aqui também para poder compara
# com os códigos em mun_rs
estim_drs_df <- estim_drs_df %>% mutate(codDRS = as.character(codDRS))
# salvando os dados num formato que economiza mais espaço que
# o dataframe completo
tmp <- estim_drs_df %>% dplyr::select(Rt,date,codDRS)
tmp1 <- estim_drs_df %>% dplyr::select(Estado,codDRS,nomDRS) %>% distinct()
estim_drs_df = list(Rt_date=tmp,estado_nomDRS=tmp1)
saveRDS(estim_drs_df,
paste("./shiny/Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep=""))
library(pacman)
# Carregando os pacotes
library(rgdal)
library(dplyr)
library(tidyverse)
library(stringi)
library(RColorBrewer)
library(leaflet)
library(maptools)
library(sp)
library(raster)
library(plotly)
library(openxlsx)
library(shinyWidgets)
# lendo os dados das RSs em um dataframe com as coordenadas e
# codDRS, nomDRS e estado correspondentes
mun_rs <- readRDS("./Rt_regsaude/mun_rs_coord.rds")
# lendo os dados das RSs em um dataframe com as coordenadas e
# codDRS, nomDRS e estado correspondentes
mun_rs <- readRDS("./mun_rs_coord.rds")
# lendo os dados das RSs em um dataframe com as coordenadas e
# codDRS, nomDRS e estado correspondentes
mun_rs <- readRDS("./shiny/Rt_regsaude/mun_rs_coord.rds")
# bando de dados com nome de estados, municípios e códigos
# de RS correspondentes
est_mun_rs <- readRDS("./Rt_regsaude/est_mun_rs.rds")
# bando de dados com nome de estados, municípios e códigos
# de RS correspondentes
est_mun_rs <- readRDS("./shiny/Rt_regsaude/est_mun_rs.rds")
# lendo os nomes dos arquivos na pasta com as curvas para
# diferentes datas
file_names <- list.files("./shiny/Rt_regsaude") %>% substring(1,10)
file_names <- file_names[str_detect(file_names,"2020")]
num_files <- length(file_names) + 1
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
estim_drs_df <- readRDS(paste("./shiny/Rt_regsaude/",
max(file_names),"_Rt_drs.rds",sep=""))
estim_drs_df <- left_join(estim_drs_df$Rt_date,estim_drs_df$estado_nomDRS,
by="codDRS")
View(estim_drs_df)
# indices de mun_rs para os quais temos curvas estimadas
codDRS_tem_curva <- which(mun_rs$codDRS %in% estim_drs_df$codDRS)
tmp <- estim_drs_df %>% filter(Estado == "MARANHAO") %>%
filter(date == max(date))
View(tmp)
View(mun_rs)
View(mun_rs)
mun_rs_esp <- mun_rs %>% filter(Estado == "MARANHAO")
# indices de mun_rs para os quais temos curvas estimadas
codDRS_tem_curva <- which(mun_rs_esp$codDRS %in% estim_drs_df$codDRS)
# variável com texto com nome do estado e da RS, para
# ser usada na popup do mapa
state_popup <- paste0("<strong>Estado: </strong>",
mun_rs_esp[codDRS_tem_curva,]$Estado,
"<br><strong>RS: </strong>",
mun_rs_esp[codDRS_tem_curva,]$nomDRS)
data_leaflet <- data.frame(x = mun_rs_esp[codDRS_tem_curva,]$lat,
y = mun_rs_esp[codDRS_tem_curva,]$lon,
id=mun_rs_esp[codDRS_tem_curva,]$codDRS,
estado_id=mun_rs_esp[codDRS_tem_curva,]$Estado,
popup_id=state_popup)
View(mun_rs)
leaflet() %>%
setView(lng=-45 , lat =-3, zoom=4) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(data=data_leaflet, ~x , ~y, layerId=~id,
popup=~popup_id,
radius=8 , color="black",  fillColor="red",
stroke = TRUE, fillOpacity = 0.8)
leaflet() %>%
setView(lng=-45 , lat =-3, zoom=6) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(data=data_leaflet, ~x , ~y, layerId=~id,
popup=~popup_id,
radius=8 , color="black",  fillColor="red",
stroke = TRUE, fillOpacity = 0.8)
leaflet() %>%
setView(lng=-42 , lat =-3, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(data=data_leaflet, ~x , ~y, layerId=~id,
popup=~popup_id,
radius=8 , color="black",  fillColor="red",
stroke = TRUE, fillOpacity = 0.8)
leaflet() %>%
setView(lng=-45 , lat =-3, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(data=data_leaflet, ~x , ~y, layerId=~id,
popup=~popup_id,
radius=8 , color="black",  fillColor="red",
stroke = TRUE, fillOpacity = 0.8)
leaflet() %>%
setView(lng=-45 , lat =-2, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(data=data_leaflet, ~x , ~y, layerId=~id,
popup=~popup_id,
radius=8 , color="black",  fillColor="red",
stroke = TRUE, fillOpacity = 0.8)
leaflet() %>%
setView(lng=-45 , lat =-5, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(data=data_leaflet, ~x , ~y, layerId=~id,
popup=~popup_id,
radius=8 , color="black",  fillColor="red",
stroke = TRUE, fillOpacity = 0.8)
leaflet() %>%
setView(lng=-45 , lat =-5, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(data=data_leaflet,
lng = ~x, lat = ~y,
label = ~popup_id,
labelOptions = labelOptions(noHide = TRUE))
state_popup <- paste0(mun_rs_esp[codDRS_tem_curva,]$nomDRS)
state_popup
tmp
estim_drs_df_esp <- estim_drs_df %>% filter(Estado == "MARANHAO") %>%
filter(date == max(date))
mun_rs_esp <- mun_rs %>% filter(Estado == "MARANHAO")
# indices de mun_rs para os quais temos curvas estimadas
codDRS_tem_curva <- which(mun_rs_esp$codDRS %in% estim_drs_df_esp$codDRS)
state_popup <- paste0(mun_rs_esp[codDRS_tem_curva,]$nomDRS,
": ",estim_drs_df_esp$Rt)
state_popup
state_popup <- paste0(mun_rs_esp[codDRS_tem_curva,]$nomDRS,
": ",round(estim_drs_df_esp$Rt,2))
state_popup
data_leaflet <- data.frame(x = mun_rs_esp[codDRS_tem_curva,]$lat,
y = mun_rs_esp[codDRS_tem_curva,]$lon,
id=mun_rs_esp[codDRS_tem_curva,]$codDRS,
estado_id=mun_rs_esp[codDRS_tem_curva,]$Estado,
popup_id=state_popup)
leaflet() %>%
setView(lng=-45 , lat =-5, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(data=data_leaflet,
lng = ~x, lat = ~y,
label = ~popup_id,
labelOptions = labelOptions(noHide = TRUE))
state_popup <- paste0(round(estim_drs_df_esp$Rt,2))
data_leaflet <- data.frame(x = mun_rs_esp[codDRS_tem_curva,]$lat,
y = mun_rs_esp[codDRS_tem_curva,]$lon,
id=mun_rs_esp[codDRS_tem_curva,]$codDRS,
estado_id=mun_rs_esp[codDRS_tem_curva,]$Estado,
popup_id=state_popup)
leaflet() %>%
setView(lng=-45 , lat =-5, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(data=data_leaflet,
lng = ~x, lat = ~y,
label = ~popup_id,
labelOptions = labelOptions(noHide = TRUE))
leaflet() %>%
setView(lng=-45 , lat =-5, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(data=data_leaflet,
lng = ~x, lat = ~y,
label = ~popup_id,
labelOptions = labelOptions(noHide = TRUE, textsize='1px'))
leaflet() %>%
setView(lng=-45 , lat =-5, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(data=data_leaflet,
lng = ~x, lat = ~y,
label = ~popup_id,
labelOptions = labelOptions(noHide = TRUE, textsize='10px'))
leaflet() %>%
setView(lng=-45 , lat =-5, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(data=data_leaflet,
lng = ~x, lat = ~y,
label = ~popup_id,
labelOptions = labelOptions(noHide = TRUE, textsize='5px'))
leaflet() %>%
setView(lng=-45 , lat =-5, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(data=data_leaflet,
lng = ~x, lat = ~y,
label = ~popup_id,
labelOptions = labelOptions(noHide = TRUE, textsize='8px'))
shiny::runApp('shiny')
state_popup
estim_drs_df_esp <- estim_drs_df %>% filter(Estado == "MARANHAO") %>%
filter(date == max(date))
mun_rs_esp <- mun_rs %>% filter(Estado == "MARANHAO")
# indices de mun_rs para os quais temos curvas estimadas
codDRS_tem_curva <- which(mun_rs_esp$codDRS %in% estim_drs_df_esp$codDRS)
state_popup <- paste0(round(estim_drs_df_esp$Rt,2))
state_popup
data_leaflet <- data.frame(x = mun_rs_esp[codDRS_tem_curva,]$lat,
y = mun_rs_esp[codDRS_tem_curva,]$lon,
id=mun_rs_esp[codDRS_tem_curva,]$codDRS,
estado_id=mun_rs_esp[codDRS_tem_curva,]$Estado,
popup_id=state_popup)
estim_drs_df_esp <- estim_drs_df %>% filter(Estado == "MARANHAO") %>%
filter(date == max(date))
# lendo os dados das RSs em um dataframe com as coordenadas e
# codDRS, nomDRS e estado correspondentes
mun_rs <- readRDS("./shiny/Rt_regsaude/mun_rs_coord.rds")
# bando de dados com nome de estados, municípios e códigos
# de RS correspondentes
est_mun_rs <- readRDS("./shiny/Rt_regsaude/est_mun_rs.rds")
# lendo os nomes dos arquivos na pasta com as curvas para
# diferentes datas
file_names <- list.files("./shiny/Rt_regsaude") %>% substring(1,10)
file_names <- file_names[str_detect(file_names,"2020")]
num_files <- length(file_names) + 1
# lendo as curvas já salvas para as RSs com pelo menos
# duas semanas epidemiológicas
estim_drs_df <- readRDS(paste("./shiny/Rt_regsaude/",
max(file_names),"_Rt_drs.rds",sep=""))
estim_drs_df <- left_join(estim_drs_df$Rt_date,estim_drs_df$estado_nomDRS,
by="codDRS")
estim_drs_df_esp <- estim_drs_df %>% filter(Estado == "MARANHAO") %>%
filter(date == max(date))
mun_rs_esp <- mun_rs %>% filter(Estado == "MARANHAO")
# indices de mun_rs para os quais temos curvas estimadas
codDRS_tem_curva <- which(mun_rs_esp$codDRS %in% estim_drs_df_esp$codDRS)
state_popup_esp <- paste0(round(estim_drs_df_esp$Rt,2))
state_popup_esp
data_leaflet <- data.frame(x = mun_rs_esp[codDRS_tem_curva,]$lat,
y = mun_rs_esp[codDRS_tem_curva,]$lon,
id=mun_rs_esp[codDRS_tem_curva,]$codDRS,
estado_id=mun_rs_esp[codDRS_tem_curva,]$Estado,
popup_id=state_popup_esp)
leaflet() %>%
setView(lng=-45 , lat =-5, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(data=data_leaflet,
lng = ~x, lat = ~y,
label = ~popup_id,
labelOptions = labelOptions(noHide = TRUE, textsize='8px'))
leaflet() %>%
setView(lng=-45 , lat =-5, zoom=5.5) %>%
addTiles(options = providerTileOptions(noWrap = TRUE)) %>%
addMarkers(data=data_leaflet,
lng = ~x, lat = ~y,
label = ~popup_id,
labelOptions = labelOptions(noHide = TRUE, textsize='9px'))
runApp('shiny')
runApp('shiny')
source("./time_varying_SIRD-master/load_packages.R")
source("./time_varying_SIRD-master/gaussian_kernel.R")
source("./time_varying_SIRD-master/estimator_calculation.R")
source("./time_varying_SIRD-master/run_SIRD.R")
library("stringi")
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% dplyr::select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada)
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% dplyr::group_by(Estado,date,codDRS,nomDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada)
) %>% ungroup %>% arrange(Estado,codDRS)
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
for(i in 1:dim(EstDRS)[1]){
dados_drs <- drs %>% filter(codDRS==EstDRS$codDRS[i])
linha_corte <- which(dados_drs$confirmed >= caso_corte)
# checando se a DRS possui pelo menos duas semanas epidemiológicas
if(!(is.na(linha_corte[1]) | length(linha_corte)<14)){
tmp <- run_SIRD(df = dados_drs,
size_population = dados_drs$populacao[1],
minimum_number_cases = caso_corte,
kc = 1, kd = 1, kr = 1, power_H = 0.4,
recovered_synthetic = TRUE, remove_last = 6)[c("Rt")]
# númerode dias para os quais temos estimativas
num_dias <- length(tmp$Rt)
# vetor com as datas referentes às estimativas
tmp2 <- names(tmp$Rt)
estimadores_drs[[i]] <- append(tmp,
list(Estado = rep(EstDRS$Estado[i],num_dias),
codDRS = rep(EstDRS$codDRS[i],num_dias),
date=tmp2))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
#table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp > 2)], as.data.frame)
estim_drs_df <- do.call("rbind",tmp2)
estim_drs_df <- dplyr::mutate(estim_drs_df,date = as.Date(date))
estim_drs_df <- dplyr::left_join(estim_drs_df,drs,by=c("Estado","codDRS","date")) %>%
tibble
#View(estim_mun_df)
rm(EstDRS); rm(estimadores_drs)
# deixamos o código das RSs aqui também para poder compara
# com os códigos em mun_rs
estim_drs_df <- estim_drs_df %>% mutate(codDRS = as.character(codDRS))
# salvando os dados num formato que economiza mais espaço que
# o dataframe completo
tmp <- estim_drs_df %>% dplyr::select(Rt,date,codDRS)
tmp1 <- estim_drs_df %>% dplyr::select(Estado,codDRS,nomDRS) %>% distinct()
estim_drs_df = list(Rt_date=tmp,estado_nomDRS=tmp1)
saveRDS(estim_drs_df,
paste("./shiny/Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep=""))
source("./time_varying_SIRD-master/load_packages.R")
source("./time_varying_SIRD-master/gaussian_kernel.R")
source("./time_varying_SIRD-master/estimator_calculation.R")
source("./time_varying_SIRD-master/run_SIRD.R")
library("stringi")
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% dplyr::select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada)
# agregando os dados por DRS, o que vai remover a variável Município.
drs <- mun %>% dplyr::group_by(Estado,date,codDRS,nomDRS) %>%
dplyr::summarise(confirmed=sum(confirmed), deaths=sum(deaths),
recovered=sum(recovered),
populacao=sum(Populacao_estimada)
) %>% ungroup %>% arrange(Estado,codDRS)
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo as DRSs separados por estado
EstDRS <- drs %>% group_by(Estado, codDRS) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_drs <- vector(mode = "list", length = dim(EstDRS)[1])
for(i in 1:dim(EstDRS)[1]){
dados_drs <- drs %>% filter(codDRS==EstDRS$codDRS[i])
linha_corte <- which(dados_drs$confirmed >= caso_corte)
# checando se a DRS possui pelo menos duas semanas epidemiológicas
if(!(is.na(linha_corte[1]) | length(linha_corte)<14)){
tmp <- run_SIRD(df = dados_drs,
size_population = dados_drs$populacao[1],
minimum_number_cases = caso_corte,
kc = 1, kd = 1, kr = 1, power_H = 0.4,
recovered_synthetic = TRUE, remove_last = 6)[c("Rt")]
# númerode dias para os quais temos estimativas
num_dias <- length(tmp$Rt)
# vetor com as datas referentes às estimativas
tmp2 <- names(tmp$Rt)
estimadores_drs[[i]] <- append(tmp,
list(Estado = rep(EstDRS$Estado[i],num_dias),
codDRS = rep(EstDRS$codDRS[i],num_dias),
date=tmp2))
}else{
estimadores_drs[[i]] <- list(Estado = EstDRS$Estado[i],
codDRS = EstDRS$codDRS[i])
}
}
# checando para quantas DRSs o modelo foi estimado
tmp <- lapply(estimadores_drs, length) %>% unlist(use.names=FALSE)
#table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# as DRSs para as quais o modelo foi estimado
tmp2 <- lapply(estimadores_drs[which(tmp > 2)], as.data.frame)
estim_drs_df <- do.call("rbind",tmp2)
estim_drs_df <- dplyr::mutate(estim_drs_df,date = as.Date(date))
estim_drs_df <- dplyr::left_join(estim_drs_df,drs,by=c("Estado","codDRS","date")) %>%
tibble
#View(estim_mun_df)
rm(EstDRS); rm(estimadores_drs)
# deixamos o código das RSs aqui também para poder compara
# com os códigos em mun_rs
estim_drs_df <- estim_drs_df %>% mutate(codDRS = as.character(codDRS))
# salvando os dados num formato que economiza mais espaço que
# o dataframe completo
tmp <- estim_drs_df %>% dplyr::select(Rt,date,codDRS)
tmp1 <- estim_drs_df %>% dplyr::select(Estado,codDRS,nomDRS) %>% distinct()
estim_drs_df = list(Rt_date=tmp,estado_nomDRS=tmp1)
saveRDS(estim_drs_df,
paste("./shiny/Rt_regsaude/",Sys.Date(),"_Rt_drs.rds",sep=""))
