buracos$confirmed[i_b] <- mun %>% dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data)  %>% dplyr::pull(confirmed) %>% last %>% as.numeric
buracos$deaths[i_b] <- mun %>% dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data)  %>% dplyr::pull(deaths) %>% last %>% as.numeric
}
dados <- rbind(dados, buracos) %>% dplyr::arrange(Codigo, Data)
# Check de que nao tem mais buracos:
nrow(dados) == nrow(dados_sem_buracos)
dados_finais <- dados %>% left_join(df_caracteristicas_fixas)
saveRDS(dados_finais, "dados_por_municipio.rds")
View(dados_finais)
#
dados_finais_agg <- dados_finais %>% dplyr::group_by(Data) %>%
dplyr::summarise(confirmed = sum(confirmed), deaths = sum(deaths))
MS_BR <- read_excel(arquivo_min_saude, guess_max = 1000000) %>% dplyr::filter(regiao == "Brasil")
MS_BR <- MS_BR %>%
dplyr::select(data, casosAcumulado, obitosAcumulado, Recuperadosnovos) %>%
dplyr::mutate(Data = ymd(data), confirmed = as.numeric(casosAcumulado),
deaths = as.numeric(obitosAcumulado), recovered = as.numeric(Recuperadosnovos),
recovered = ifelse(is.na(recovered), 0, recovered)) %>% dplyr::select(Data, confirmed, deaths, recovered)
saveRDS(MS_BR, "dados_MS_brasil.rds")
# Lendo os dados dos municípios
mun <- readRDS("./dados_por_municipio.rds")
View(mun)
View(dados_finais)
# removendo municípios cuja soma de recuperados é NA
tmp <- mun %>% group_by(Estado,Município) %>%
summarise(soma = sum(confirmed), mort = sum(deaths),idh = IDHM_Renda[1]) %>%
filter(is.na(soma) | is.na(idh) | is.na(mort))
View(tmp)
table(tmp$Estado)
dim(tmp)[1] # número de municípios removidos
mun <- mun %>% group_by(Estado,Município) %>%
filter(!(is.element(Estado, tmp$Estado) & is.element(Município,tmp$Município))) %>%
ungroup
View(tmp)
# selecionando e criando as variáveis que vão ser usadas no modelo
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered
) %>% ungroup %>% select(Estado,Município,Data,confirmed,deaths,recovered,
Populacao_estimada,IDHM_Renda)
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo os municípios separados por estado
EstMun <- mun %>% group_by(Estado,Município) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_mun <- vector(mode = "list", length = dim(EstMun)[1])
for(i in 1:dim(EstMun)[1]){
dados_mun <- mun %>% filter(Estado==EstMun$Estado[i] & Município==EstMun$Município[i])
linha_corte <- which(dados_mun$confirmed >= caso_corte)
# se o município não tiver 25 ou mais casos confirmados em dia algum,
# linha_corte será NA, mas para obter as curvas para as duas últimas
# semanas, precisamos de pelo menos 15 dias epidemiológicos, pois uma
# diferença é tomada durante a estimação do modelo
if(is.na(linha_corte[1]) | length(linha_corte)<15){
estimadores_mun[[i]] <- list(Estado = EstMun$Estado[i], Município = EstMun$Município[i])
}else{
tmp <- estima_parametros(dados_mun,
populacao = dados_mun$Populacao_estimada[1],
caso_corte = 25,
expoente_H = 0.3,
recuperados_sintetico = TRUE)[c("nu_t", "beta_t", "mu_t", "R_e","datas")] %>%
lapply(function(x) tail(x,14))
estimadores_mun[[i]] <- append(tmp,list(Estado = rep(EstMun$Estado[i],14), Município = rep(EstMun$Município[i],14)))
}
}
# checando para quantos municípios o modelo foi estimado
tmp <- lapply(estimadores_mun, length) %>% unlist(use.names=FALSE)
table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# os municípios para os quais o modelo foi estimado
tmp2 <- lapply(estimadores_mun[which(tmp == 7)], as.data.frame)
estim_mun_df <- do.call("rbind",tmp2)
estim_mun_df <- mutate(estim_mun_df, Data=estim_mun_df$datas) %>%
select(-datas)
estim_mun_df <- dplyr::left_join(estim_mun_df,mun,by=c("Estado","Município","Data")) %>%
tibble
View(estim_mun_df)
dim(EstMun)
rm(EstMun)
dim(EstMun)
rm(EstMun); rm(estimadores_mun)
# checando o número de municípios que sobraram por estado
tmp <- estim_mun_df %>% group_by(Estado,Município) %>%
dplyr::summarise(count = n())
table(tmp$Estado)
estim_mun_df %>% dplyr::filter(Estado=='RIO DE JANEIRO') %>%
ggplot( aes(x=Data, y=R_e, group=Município)) +
geom_line()
tmp <- estim_mun_df %>% dplyr::filter(Estado=='RIO DE JANEIRO') %>%
group_by(Estado,Data) %>%
dplyr::summarize(R_e = mean(R_e))
estim_mun_df %>% dplyr::filter(Estado=='RIO DE JANEIRO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 3)
require(shiny)
setwd("~/Documents/COVID-19/Zip_Covid_SIRD/shiny_mun_curvas")
runApp("../shiny_mun_curvas/")
# curva dos municípios do estado usado no filtro e a respectiva
# curva média
tmp <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
group_by(Estado,Data) %>%
dplyr::summarize(R_e = mean(R_e))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 3)
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado,ylim=c(0,20))) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 2)
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado),ylim=c(0,20)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 2)
# curva dos municípios do estado usado no filtro e a respectiva
# curva média
tmp <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
group_by(Estado,Data) %>%
dplyr::summarize(R_e = mean(R_e))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 2)
# curva dos municípios do estado usado no filtro e a respectiva
# curva média
tmp <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
group_by(Estado,Data) %>%
dplyr::summarize(R_e = mean(R_e))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 2)
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 2) + ylim(0,20)
# curva dos municípios do estado usado no filtro e a respectiva
# curva média
tmp <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
group_by(Estado,Data) %>%
dplyr::summarize(R_e = mean(R_e))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 2) + ylim(0,20)
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 2) +
coord_cartesian( ylim = c(0, 20))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 2,color='black') +
coord_cartesian( ylim = c(0, 20))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
plot_ly(x = Data) %>%
add_trace(y = R_e, name = "R_3", mode = 'lines') %>%
add_trace(y = tmp, name = "media", mode = 'lines') %>%
layout(title = "Número efetivo de reprodução",  legend = list(orientation = "h"))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
plot_ly(x = estim_mun_df$Data) %>%
add_trace(y = estim_mun_df$R_e, name = "R_3", mode = 'lines') %>%
add_trace(y = tmp, name = "media", mode = 'lines') %>%
layout(title = "Número efetivo de reprodução",  legend = list(orientation = "h"))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
plot_ly(x = estim_mun_df$Data) %>%
add_trace(y = estim_mun_df$R_e, name = "R_3", mode = 'lines') %>%
#  add_trace(y = tmp, name = "media", mode = 'lines') %>%
layout(title = "Número efetivo de reprodução",  legend = list(orientation = "h"))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
plot_ly(x = estim_mun_df$Data) %>%
add_trace(y = estim_mun_df$R_e, name = "R_3", mode = 'lines',roup=estim_mun_df$Município) %>%
#  add_trace(y = tmp, name = "media", mode = 'lines') %>%
layout(title = "Número efetivo de reprodução",  legend = list(orientation = "h"))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
plot_ly(x = Data) %>%
add_trace(y = R_e, name = "R_3", mode = 'lines',group=~Município) %>%
#  add_trace(y = tmp, name = "media", mode = 'lines') %>%
layout(title = "Número efetivo de reprodução",  legend = list(orientation = "h"))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
plot_ly(x = ~Data) %>%
add_trace(y = R_e, name = "R_3", mode = 'lines',group=~Município) %>%
#  add_trace(y = tmp, name = "media", mode = 'lines') %>%
layout(title = "Número efetivo de reprodução",  legend = list(orientation = "h"))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
plot_ly(x = ~Data) %>%
add_trace(y = ~R_e, name = "R_3", mode = 'lines',group=~Município) %>%
#  add_trace(y = tmp, name = "media", mode = 'lines') %>%
layout(title = "Número efetivo de reprodução",  legend = list(orientation = "h"))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20)) +
geom_point(aes(text=sprintf(Município)))
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20)) +
geom_line(colour = "red", aes(Município))
ggplotly(p, tooltip = "text")
library(plotly)
View(estim_mun_df)
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município, text=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20)) +
geom_line(colour = "red", aes(Município))
ggplotly(p, tooltip = "text")
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado, text=Município)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20)) +
geom_line(colour = "red", aes(Município))
ggplotly(p, tooltip = "text")
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado,group=Município, text=Município)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20)) +
geom_line(colour = "red", aes(Município))
ggplotly(p, tooltip = "text")
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado,group=Município, text=Município)) +
#  geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20)) +
geom_line(colour = "red", aes(Município))
ggplotly(p, tooltip = "text")
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado,group=Município)) +
#  geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20)) +
geom_line(colour = "red", aes(Município))
ggplotly(p, tooltip = "text")
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado,group=Município, text=paste(Município))) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20)) +
geom_line(colour = "red", aes(Município))
ggplotly(p, tooltip = "text")
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20)) +
geom_line(colour = "red", aes(Município))
ggplotly(p, tooltip = "text")
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20)) +
geom_line(colour = "red", aes(Município))
ggplotly(p)
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20)) +
geom_line(colour = "red", aes(Município))
p
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20)) +
geom_line(colour = "red", aes(Município))
estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20))
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black') +
coord_cartesian( ylim = c(0, 20))
ggplotly(p)
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black',text="Média") +
coord_cartesian( ylim = c(0, 20))
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color='black',group="Média") +
coord_cartesian( ylim = c(0, 20))
ggplotly(p)
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color=1) +
coord_cartesian( ylim = c(0, 20))
ggplotly(p)
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color="Média") +
coord_cartesian( ylim = c(0, 20))
ggplotly(p)
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color="black") +
coord_cartesian( ylim = c(0, 20))
ggplotly(p)
p <- estim_mun_df %>% dplyr::filter(Estado=='SAO PAULO') %>%
ggplot( aes(x=Data, y=R_e,color=Estado)) +
geom_line(aes(group=Município), alpha = .4) +
geom_line(data=tmp, alpha = .8, size = 1.5,color="black")
#  coord_cartesian( ylim = c(0, 20))
ggplotly(p)
# criando uma variável dummy nos dados que assume 1 se o município
# tem IDH maior que a mediana e 0 caso contrário
tmp <- estim_mun_df %>% dplyr::filter(Estado=='RIO DE JANEIRO') %>%
group_by(Município) %>% dplyr::summarize(med = median(IDHM_Renda)) %>%
dplyr::summarize(median(med))
mun_df_grupo <- estim_mun_df %>% dplyr::filter(Estado=='RIO DE JANEIRO') %>%
group_by(Município) %>% dplyr::mutate(idh_grupo = ifelse(median(IDHM_Renda)>tmp,1,0))
# criando uma matriz para ser usada na função fanova.tests, tendo as
# curvas observadas nas colunas e pontos de discretização nas linhas
tmp <- mun_df_grupo %>% select(Município,Data,R_e) %>%
tidyr::spread(key = Município, value = R_e)
dados_fanova <- tmp %>% select(-Data) %>% as.matrix
rownames(dados_fanova) <- tmp$Data %>% as.character
# vetor com os grupos referente a cada curva observada
grupos_fanova <- mun_df_grupo %>% select(Município,idh_grupo) %>%
dplyr::group_by(Município) %>% unique %>% as.matrix
table(grupos_fanova)
table(grupos_fanova[,2])
table(grupos_fanova[,2])>15
table(grupos_fanova[,2])>1
prod(table(grupos_fanova[,2])>1)
View(dados_mun)
dados_mun$Populacao_estimada[1]
getwd()
runApp("../shiny_mun_curvas")
runApp("../shiny_mun_curvas")
runApp("../shiny_mun_curvas")
runApp("../shiny_mun_curvas")
runApp("../shiny_mun_curvas")
prod(table(grupos_fanova[,2])>1)
prod(table(grupos_fanova[,2])>1)
runApp("../shiny_mun_curvas")
runApp("../shiny_mun_curvas")
pacote <- function(p){
if (!is.element(p, installed.packages()[,1])){
message('Pacote ',p,' nao encontrado. Instalando..')
install.packages(p, dep = TRUE)
}
message('Carregando pacote ',p)
require_worked <- try(require(p, character.only = TRUE))
if(!require_worked) {
install.packages(p, dep = TRUE)
}
}
pacote("tidyverse")
pacote("lubridate")
pacote("writexl")
pacote("httr")
pacote("readr")
pacote("readxl")
pacote("plotly")
calcula_estimador <- function(t_range, k_range, vetor_x, vetor_y, H) {
out_ <- rep(NA, t_range)
for(t in 1:t_range) {
numerador <- 0
denominador <- 0
for(k in 1:k_range) {
numerador <- numerador + gaussian_kernel((t - k)/H) * vetor_y[k] * vetor_x[k]
denominador <- denominador + gaussian_kernel((t - k)/H) * vetor_x[k] * vetor_x[k]
}
out_[t] <- numerador/denominador
}
return(out_)
}
gaussian_kernel <- function(x) {
(1 / (sqrt(2 * pi))) * exp(-(x^2/2))
}
estima_parametros <- function(dados, populacao, caso_corte = 50, kc = 1, kd = 1, kr = 1, expoente_H = 0.3, recuperados_sintetico = TRUE) {
y <- (dados %>% dplyr::select(x = recovered, r = recovered, d = deaths, c = confirmed) %>% as.matrix)
linha_corte <- which(y[,"c"] >= caso_corte)[1]
N <- populacao
n <- nrow(y) - linha_corte
H <- n^expoente_H
dt <- y[,"d"]/kd
ct <- y[,"c"]/kc
st <- N - ct
if(recuperados_sintetico) {
rt <- dplyr::lag(ct, 14) - dt
rt <- ifelse(is.na(rt), 0, rt)
} else {
rt <- y[,"r"]/kr
}
xt <- ct - dt - rt
dt <- dt[linha_corte:(n+linha_corte)]
st <- st[linha_corte:(n+linha_corte)]
xt <- xt[linha_corte:(n+linha_corte)]
rt <- rt[linha_corte:(n+linha_corte)]
ct <- ct[linha_corte:(n+linha_corte)]
delta_dt <- diff(dt)
delta_rt <- diff(rt)
delta_xt <- diff(xt)
delta_st <- diff(st)
mu_est <- calcula_estimador(n, n, xt[-length(xt)], delta_dt, H)
nu_est <- calcula_estimador(n, n, xt[-length(xt)], delta_rt, H)
beta_est <- - calcula_estimador(n, n, xt[-length(xt)] * st[-length(st)]/N, delta_st, H)
R_e <- beta_est / (mu_est + nu_est) * st[-length(st)]/N
return(list(nu_t = nu_est,
beta_t = beta_est,
mu_t = mu_est,
R_e = R_e,
xt = xt,
rt = rt,
st = st,
dt = dt,
primeira_data = first(dados$Data),
datas = dados$Data[linha_corte:(n+linha_corte)][-length(dados$Data[linha_corte:(n+linha_corte)])]
))
}
# Lendo os dados dos municípios
mun <- readRDS("./dados_por_municipio.rds")
# Lendo os dados dos municípios
mun <- readRDS("../dados_por_municipio.rds")
View(mun)
# removendo municípios cuja soma de recuperados é NA
tmp <- mun %>% group_by(Estado,Município) %>%
summarise(soma = sum(confirmed), mort = sum(deaths),idh = IDHM_Renda[1]) %>%
filter(is.na(soma) | is.na(idh) | is.na(mort))
View(tmp)
table(tmp$Estado)
dim(tmp)[1] # número de municípios removidos
mun <- mun %>% group_by(Estado,Município) %>%
filter(!(is.element(Estado, tmp$Estado) & is.element(Município,tmp$Município))) %>%
ungroup
# selecionando e criando as variáveis que vão ser usadas no modelo
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered
) %>% ungroup %>% select(Estado,Município,Data,confirmed,deaths,recovered,
Populacao_estimada,IDHM_Renda)
# número de casos confirmados que marca o primeiro dia epidemiológico
caso_corte = 25
# tabela contendo os municípios separados por estado
EstMun <- mun %>% group_by(Estado,Município) %>% dplyr::summarise(count = n())
# lista que irá armazenar as curvas
estimadores_mun <- vector(mode = "list", length = dim(EstMun)[1])
for(i in 1:dim(EstMun)[1]){
dados_mun <- mun %>% filter(Estado==EstMun$Estado[i] & Município==EstMun$Município[i])
linha_corte <- which(dados_mun$confirmed >= caso_corte)
# se o município não tiver 25 ou mais casos confirmados em dia algum,
# linha_corte será NA, mas para obter as curvas para as duas últimas
# semanas, precisamos de pelo menos 15 dias epidemiológicos, pois uma
# diferença é tomada durante a estimação do modelo
if(is.na(linha_corte[1]) | length(linha_corte)<15){
estimadores_mun[[i]] <- list(Estado = EstMun$Estado[i], Município = EstMun$Município[i])
}else{
tmp <- estima_parametros(dados_mun,
populacao = dados_mun$Populacao_estimada[1],
caso_corte = 25,
expoente_H = 0.3,
recuperados_sintetico = TRUE)[c("nu_t", "beta_t", "mu_t", "R_e","datas")] %>%
lapply(function(x) tail(x,14))
estimadores_mun[[i]] <- append(tmp,list(Estado = rep(EstMun$Estado[i],14), Município = rep(EstMun$Município[i],14)))
}
}
# checando para quantos municípios o modelo foi estimado
tmp <- lapply(estimadores_mun, length) %>% unlist(use.names=FALSE)
table(tmp)
# usando a lista com as curvas, montamos um tibble contendo somente
# os municípios para os quais o modelo foi estimado
tmp2 <- lapply(estimadores_mun[which(tmp == 7)], as.data.frame)
estim_mun_df <- do.call("rbind",tmp2)
estim_mun_df <- mutate(estim_mun_df, Data=estim_mun_df$datas) %>%
select(-datas)
estim_mun_df <- dplyr::left_join(estim_mun_df,mun,by=c("Estado","Município","Data")) %>%
tibble
View(estim_mun_df)
rm(EstMun); rm(estimadores_mun)
# checando o número de municípios que sobraram por estado
tmp <- estim_mun_df %>% group_by(Estado,Município) %>%
dplyr::summarise(count = n())
table(tmp$Estado)
estim_mun_df %>% filter(Estado='SAO PAULO',Município='Jaci') %>%
View()
estim_mun_df %>% filter(Estado=='SAO PAULO',Município=='Jaci') %>%
View()
