ggplot( aes(x=Data, y=mu_hat)) +
geom_line() +
labs(title="mu_t")
library(gridExtra)
grid.arrange(p_Re,p_beta,p_nu,p_mu, nrow=2)
# Lendo os dados dos municípios
mun <- readRDS("../dados_por_municipio.rds")
source('../../time_varying_SIRD/estimator_calculation.R')
source('../../time_varying_SIRD/gaussian_kernel.R')
source('../../time_varying_SIRD/load_packages.R')
source('../../time_varying_SIRD/run_SIRD.R')
# removendo municípios cuja soma de recuperados é NA
tmp <- mun %>% group_by(Estado,Município) %>%
summarise(soma = sum(confirmed), mort = sum(deaths),idh = IDHM[1]) %>%
filter(is.na(soma) | is.na(idh) | is.na(mort))
#View(tmp)
table(tmp$Estado)
dim(tmp)[1] # número de municípios removidos
mun <- mun %>% group_by(Estado,Município) %>%
filter(!(is.element(Estado, tmp$Estado) & is.element(Município,tmp$Município))) %>%
ungroup
colnames(mun)
# selecionando e criando as variáveis que vão ser usadas no modelo
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada, IDHM,
PIB_2015,Media_temperatura_2Q_2002,Altitude)
# renomeando as classes de urbanização
urbanizacao <- urbanizacao %>%
mutate(classe_urb = ifelse(classe_urb=="Unidade populacional com moderado grau de urbanizacao","moderado",
ifelse(classe_urb=="Unidade populacional com alto grau de urbanizacao","alto","baixo")))
# Classificação e Caracterização dos Espaços Rurais e Urbanos do Brasil
urbanizacao <- read_excel("../Grau_de_urbanizacao.xlsx", guess_max = 100000,
col_names = TRUE,sheet = 2) %>%
dplyr::select(Estado = NM_UF, Município = NM_MUN, Codigo = CD_GCMUN,
pop_area_densa = POP_AREA_DENSA,
pop_area_nao_densa = POP_AREA_NAO_DENSA,
pop_total = POP_TOTAL_UNID_POP, grau_urb = GR_URB,
classe_urb = CLASSES)
# renomeando as classes de urbanização
urbanizacao <- urbanizacao %>%
mutate(classe_urb = ifelse(classe_urb=="Unidade populacional com moderado grau de urbanizacao","moderado",
ifelse(classe_urb=="Unidade populacional com alto grau de urbanizacao","alto","baixo")))
# eliminando o último dígito do código nesses dados do IBGE, para deixar ele
# com 6 dígitos, como está nos dados do Ministério da Saúde
urbanizacao <- urbanizacao %>% mutate(Codigo = str_sub(as.character(Codigo), start = 1,end = 6))
# tirando acentos e deixando em caixa alta os nomes dos estados
urbanizacao <- urbanizacao %>% mutate(Estado = stri_trans_general(str = Estado,
id = "Latin-ASCII")) %>%
mutate(Estado = stri_trans_general(str = Estado,
id = "upper"))
pacote("stringi")
library(stringi)
# tirando acentos e deixando em caixa alta os nomes dos estados
urbanizacao <- urbanizacao %>% mutate(Estado = stri_trans_general(str = Estado,
id = "Latin-ASCII")) %>%
mutate(Estado = stri_trans_general(str = Estado,
id = "upper"))
mun %>% select(Codigo) %>% distinct() %>% dim()
urbanizacao %>% select(Codigo) %>% distinct() %>% dim()
# número de municípios em urbanizacao que não estão em mun
urbanizacao %>% select(Estado,Município,Codigo) %>%
filter(!(Codigo %in% mun$Codigo)) %>% distinct() %>% dim()
# adicionando os dados sobre urbanização dos municípios ao dataframe mun
mun <- mun %>% group_by(Estado,Codigo) %>%
dplyr::inner_join(urbanizacao %>% select(-Município),
by=c("Estado","Codigo")) %>%
ungroup()
View(mun)
vcapitais <- c("Belém", "Boa Vista", "Macapá", "Manaus", "Palmas",
"Porto Velho","Rio Branco", "Aracaju", "Fortaleza",
"João Pessoa", "Maceió", "Natal", "Recife", "Salvador",
"São Luís", "Teresina", "Brasília" ,
"Campo Grande", "Cuiabá", "Goiânia",
"Belo Horizonte", "Rio de Janeiro", "São Paulo",
"Vitória","Curitiba", "Florianópolis", "Porto Alegre")
tmp <- mun %>% filter(Município %in% vcapitais) %>%
filter(date>"2020-05-17")
View(tmp)
require(openxlsx)
write.xlsx(x = tmp, file = "Covid_capitais.xlsx")
setwd("~/Documents/COVID-19/Covid_SIRD/shiny_mun_curvas")
# selecionando e criando as variáveis que vão ser usadas no modelo
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada, IDHM,
PIB_2015,Media_temperatura_2Q_2002,Altitude)
require(dplyr)
# selecionando e criando as variáveis que vão ser usadas no modelo
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada, IDHM,
PIB_2015,Media_temperatura_2Q_2002,Altitude)
# Nome do arquivo do min. saude
arquivo_min_saude <- "HIST_PAINEL_COVIDBR_07jul2020.xlsx"
setwd("~/Documents/COVID-19/Covid_SIRD")
# Nome do arquivo a ser usado como historico
arquivo_historico <- "Dados_Municipais_wide.csv"
pacote <- function(p){
if (!is.element(p, installed.packages()[,1])){
message('Pacote ',p,' nao encontrado. Instalando..')
install.packages(p, dep = TRUE)
}
message('Carregando pacote ',p)
require_worked <- try(require(p, character.only = TRUE))
if(!require_worked) {
install.packages(p, dep = TRUE)
}
}
pacote("tidyverse")
pacote("lubridate")
pacote("writexl")
pacote("httr")
pacote("readr")
pacote("readxl")
# Atualizando tidyr se necessario
if(installed.packages() %>% as.data.frame %>%
dplyr::filter(Package == "tidyr") %>% pull(Version)
%>% as.character < "1.0") {
install.packages("tidyr")
pacote("tidyr")
}
# Dados enviados por Henrique e Iuri
municipais_wide <- read_csv(arquivo_historico) %>%
dplyr::mutate(Codigo = as.character(Codigo))
df_caracteristicas_fixas <- municipais_wide %>%
dplyr::select(- starts_with("casos"), - starts_with("mortes"))
municipais_wide_casos <- municipais_wide %>%
dplyr::select(Codigo, starts_with("casos."))
municipais_wide_mortes <- municipais_wide %>%
dplyr::select(Codigo, starts_with("mortes."))
mun_casos <- municipais_wide_casos %>%
pivot_longer(- c(Codigo), names_to = "Data", values_to = "confirmed") %>%
dplyr::mutate(Data = Data %>% str_replace_all("casos.", "") %>% ymd)
mun <- municipais_wide_mortes %>%
pivot_longer(- c(Codigo), names_to = "Data", values_to = "deaths") %>%
dplyr::mutate(Data = Data %>% str_replace_all("mortes.", "") %>% ymd) %>%
full_join(mun_casos)
df_msaude <- read_excel(paste0(arquivo_min_saude), guess_max = 100000) %>%
dplyr::select(Data = data, Codigo = codmun, deaths = obitosAcumulado,
Municipio = municipio, codDRS = codRegiaoSaude,
nomDRS = nomeRegiaoSaude, confirmed = casosAcumulado) %>%
dplyr::mutate(Data = ymd(Data),
confirmed = as.numeric(confirmed),
deaths = as.numeric(deaths)) %>%
dplyr::filter(!is.na(Municipio)) %>% dplyr::select(-Municipio)
ultima_data_disponivel <- df_msaude$Data %>% max
# Vendo quais municipios nao estao indo ate a ultima data da base (possiveis erros)
codigos_com_erro <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::summarise(menor_data = min(Data), maior_data = max(Data)) %>%
dplyr::arrange(maior_data) %>% dplyr::filter(maior_data != max(maior_data)) %>%
dplyr::pull(Codigo)
message("Numero de municipios que nao vao ate o final: ", length(codigos_com_erro))
message("Valores de casos acumulados para os municipios com esse erro: ",
df_msaude %>% dplyr::filter(Codigo %in% codigos_com_erro) %>%
dplyr::pull(confirmed) %>% unique %>% sort %>% paste(collapse = ", "))
message("Vou completar esses municipios repetindo o ultimo valor de casos e
obitos ate a ultima data")
for(cod_ in codigos_com_erro) {
tbl_temp <- df_msaude %>% dplyr::filter(Codigo == cod_) %>%
dplyr::filter(Data == max(Data)) %>% unique()
ultima_data <- tbl_temp$Data
datas_faltantes <- seq.Date(from = ultima_data + 1, to = ultima_data_disponivel, by = 1)
tbl_completando <- tibble(Data = datas_faltantes, Codigo = cod_) %>%
left_join(tbl_temp %>% dplyr::select(-Data), by = "Codigo") %>%
dplyr::select(colnames(tbl_temp))
df_msaude <- rbind(df_msaude, tbl_completando)
}
# Essa base ja esta com todos os municipios indo ate a ultima data
df_msaude <- df_msaude %>% dplyr::arrange(Codigo, Data)
# deixando Codigo como character
df_msaude <- df_msaude %>% mutate(Codigo = as.character(Codigo))
comparacao_primeiro_dia <- df_msaude %>% dplyr::group_by(Codigo) %>%
dplyr::filter(Data == min(Data)) %>%
dplyr::select(everything(), deaths_MS = deaths,
confirmed_MS = confirmed) %>% left_join(mun)
comparacao_primeiro_dia <- comparacao_primeiro_dia %>% dplyr::mutate(
check_confirmed = confirmed_MS - confirmed,
check_deaths = deaths_MS - deaths
)
# Verificano se os municipios que nem entraram, ate hoje, no do MSaude
# possuem um numero relevante de casos segundo Brasil.IO
mun_apenas_BrasilIO <- mun %>% dplyr::filter(!Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::group_by(Codigo) %>% dplyr::filter(Data == max(Data))  %>% dplyr::arrange(desc(confirmed))
# Dentre os municipios que estao no MS, pegando as datas anteriores
#  as disponiveis no MS
keys_fora_do_df_msaude <- anti_join(mun %>% dplyr::filter(Codigo %in% unique(df_msaude$Codigo)) %>%
dplyr::select(Codigo, Data),
df_msaude %>% dplyr::select(Codigo, Data)) %>%
left_join(mun)
# adicionando os dados de DRS referentes aos municípios neste dataframe
keys_fora_do_df_msaude <- keys_fora_do_df_msaude %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(keys_fora_do_df_msaude, df_msaude)
dados_sem_buracos <- expand.grid(Codigo = unique(dados$Codigo), Data = unique(dados$Data)) %>%
dplyr::mutate(Codigo = as.character(Codigo), Data = ymd(Data))
buracos <- anti_join(dados_sem_buracos, dados %>% dplyr::select(Codigo, Data))
# Vou substituir os buracos pelo ultimo dado. Sao poucos confirmados e
# obitos nesses casos.
if(nrow(buracos)>0){
buracos <- buracos %>% dplyr::mutate(confirmed = NA, deaths = NA)
for(i_b in 1:nrow(buracos)) {
buracos$confirmed[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(confirmed) %>% last %>% as.numeric
buracos$deaths[i_b] <- mun %>%
dplyr::filter(Codigo == buracos[i_b,]$Codigo, Data < buracos[i_b,]$Data) %>%
dplyr::pull(deaths) %>% last %>% as.numeric
}
# adicionando os dados de DRS referentes aos municípios neste dataframe
buracos <- buracos %>% group_by(Codigo) %>%
inner_join(df_msaude %>% select(Codigo,codDRS,nomDRS) %>%
group_by(Codigo,codDRS,nomDRS) %>% distinct(),
by=c("Codigo")) %>% ungroup()
dados <- rbind(dados, buracos) %>% dplyr::arrange(Codigo, Data)
# Check de que nao tem mais buracos:
nrow(dados) == nrow(dados_sem_buracos)
}
dados_finais <- dados %>% left_join(df_caracteristicas_fixas)
saveRDS(dados_finais, "dados_por_municipio.rds")
setwd("~/Documents/COVID-19/Covid_SIRD/shiny_mun_curvas")
# Lendo os dados dos municípios
mun <- readRDS("../dados_por_municipio.rds")
require(dplyr)
# selecionando e criando as variáveis que vão ser usadas no modelo
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada, IDHM,
PIB_2015,Media_temperatura_2Q_2002,Altitude)
vcapitais <- c("Belém", "Boa Vista", "Macapá", "Manaus", "Palmas",
"Porto Velho","Rio Branco", "Aracaju", "Fortaleza",
"João Pessoa", "Maceió", "Natal", "Recife", "Salvador",
"São Luís", "Teresina", "Brasília" ,
"Campo Grande", "Cuiabá", "Goiânia",
"Belo Horizonte", "Rio de Janeiro", "São Paulo",
"Vitória","Curitiba", "Florianópolis", "Porto Alegre")
tmp <- mun %>% filter(Município %in% vcapitais) %>%
filter(date>"2020-05-17")
tmp %>% select(Estado,Município) %>% distinct() %>%
group_by(Município) %>% summarise(count = n())
tmp %>% select(Estado,Município) %>% distinct() %>%
group_by(Município) %>% summarise(count = n()) %>%
filter(count>1)
tmp <- tmp %>% select(-(Município=="Belém" & Estado!="PARA"))
View(tmp)
tmp <- tmp %>% filter(-(Município=="Belém" & Estado!="PARA"))
tmp <- tmp %>% filter(!(Município=="Belém" & Estado!="PARA"))
tmp %>% select(Estado,Município) %>% distinct() %>%
group_by(Município) %>% summarise(count = n()) %>%
filter(count>1)
tmp <- mun %>% filter(Município %in% vcapitais) %>%
filter(date>"2020-05-17")
tmp %>% select(Estado,Município) %>% distinct() %>%
group_by(Município) %>% summarise(count = n()) %>%
filter(count>1)
tmp <- tmp %>% filter(!(Município=="Belém" & Estado!="PARA")) %>%
filter(!(Município=="Boa Vista" & Estado!="RORAIMA")) %>%
filter(!(Município=="Campo Grande" & Estado!="MATO GROSSO DO SUL")) %>%
filter(!(Município=="Palmas" & Estado!="TOCANTINS")) %>%
filter(!(Município=="Rio Branco" & Estado!="ACRE"))
tmp %>% select(Estado,Município) %>% distinct() %>%
group_by(Município) %>% summarise(count = n()) %>%
filter(count>1)
View(tmp)
require(openxlsx)
write.xlsx(x = tmp, file = "Covid_capitais.xlsx")
# Lendo os dados dos municípios
mun <- readRDS("../dados_por_municipio.rds")
require(dplyr)
# selecionando e criando as variáveis que vão ser usadas no modelo
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada, IDHM,
PIB_2015,Media_temperatura_2Q_2002,Altitude)
# Classificação e Caracterização dos Espaços Rurais e Urbanos do Brasil
urbanizacao <- read_excel("../Grau_de_urbanizacao.xlsx", guess_max = 100000,
col_names = TRUE,sheet = 2) %>%
dplyr::select(Estado = NM_UF, Município = NM_MUN, Codigo = CD_GCMUN,
pop_area_densa = POP_AREA_DENSA,
pop_area_nao_densa = POP_AREA_NAO_DENSA,
pop_total = POP_TOTAL_UNID_POP, grau_urb = GR_URB,
classe_urb = CLASSES)
require(readxl)
# Classificação e Caracterização dos Espaços Rurais e Urbanos do Brasil
urbanizacao <- read_excel("../Grau_de_urbanizacao.xlsx", guess_max = 100000,
col_names = TRUE,sheet = 2) %>%
dplyr::select(Estado = NM_UF, Município = NM_MUN, Codigo = CD_GCMUN,
pop_area_densa = POP_AREA_DENSA,
pop_area_nao_densa = POP_AREA_NAO_DENSA,
pop_total = POP_TOTAL_UNID_POP, grau_urb = GR_URB,
classe_urb = CLASSES)
# renomeando as classes de urbanização
urbanizacao <- urbanizacao %>%
mutate(classe_urb = ifelse(classe_urb=="Unidade populacional com moderado grau de urbanizacao","moderado",
ifelse(classe_urb=="Unidade populacional com alto grau de urbanizacao","alto","baixo")))
# eliminando o último dígito do código nesses dados do IBGE, para deixar ele
# com 6 dígitos, como está nos dados do Ministério da Saúde
urbanizacao <- urbanizacao %>% mutate(Codigo = str_sub(as.character(Codigo), start = 1,end = 6))
require(openxlsx)
require(stringi)
# selecionando e criando as variáveis que vão ser usadas no modelo
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada, IDHM,
PIB_2015,Media_temperatura_2Q_2002,Altitude)
# Lendo os dados dos municípios
mun <- readRDS("../dados_por_municipio.rds")
require(dplyr)
require(dplyr)
require(readxl)
require(openxlsx)
require(stringi)
# Lendo os dados dos municípios
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas no modelo
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada, IDHM,
PIB_2015,Media_temperatura_2Q_2002,Altitude)
# Classificação e Caracterização dos Espaços Rurais e Urbanos do Brasil
urbanizacao <- read_excel("../Grau_de_urbanizacao.xlsx", guess_max = 100000,
col_names = TRUE,sheet = 2) %>%
dplyr::select(Estado = NM_UF, Município = NM_MUN, Codigo = CD_GCMUN,
pop_area_densa = POP_AREA_DENSA,
pop_area_nao_densa = POP_AREA_NAO_DENSA,
pop_total = POP_TOTAL_UNID_POP, grau_urb = GR_URB,
classe_urb = CLASSES)
# renomeando as classes de urbanização
urbanizacao <- urbanizacao %>%
mutate(classe_urb = ifelse(classe_urb=="Unidade populacional com moderado grau de urbanizacao","moderado",
ifelse(classe_urb=="Unidade populacional com alto grau de urbanizacao","alto","baixo")))
# eliminando o último dígito do código nesses dados do IBGE, para deixar ele
# com 6 dígitos, como está nos dados do Ministério da Saúde
urbanizacao <- urbanizacao %>% mutate(Codigo = str_sub(as.character(Codigo), start = 1,end = 6))
?stri_sub
require(tidyverse)
# renomeando as classes de urbanização
urbanizacao <- urbanizacao %>%
mutate(classe_urb = ifelse(classe_urb=="Unidade populacional com moderado grau de urbanizacao","moderado",
ifelse(classe_urb=="Unidade populacional com alto grau de urbanizacao","alto","baixo")))
# eliminando o último dígito do código nesses dados do IBGE, para deixar ele
# com 6 dígitos, como está nos dados do Ministério da Saúde
urbanizacao <- urbanizacao %>% mutate(Codigo = str_sub(as.character(Codigo), start = 1,end = 6))
# tirando acentos e deixando em caixa alta os nomes dos estados
urbanizacao <- urbanizacao %>% mutate(Estado = stri_trans_general(str = Estado,
id = "Latin-ASCII")) %>%
mutate(Estado = stri_trans_general(str = Estado,
id = "upper"))
mun %>% select(Codigo) %>% distinct() %>% dim()
urbanizacao %>% select(Codigo) %>% distinct() %>% dim()
# número de municípios em urbanizacao que não estão em mun
urbanizacao %>% select(Estado,Município,Codigo) %>%
filter(!(Codigo %in% mun$Codigo)) %>% distinct() %>% dim()
# adicionando os dados sobre urbanização dos municípios ao dataframe mun
mun <- mun %>% group_by(Estado,Codigo) %>%
dplyr::inner_join(urbanizacao %>% select(-Município),
by=c("Estado","Codigo")) %>%
ungroup()
vcapitais <- c("Belém", "Boa Vista", "Macapá", "Manaus", "Palmas",
"Porto Velho","Rio Branco", "Aracaju", "Fortaleza",
"João Pessoa", "Maceió", "Natal", "Recife", "Salvador",
"São Luís", "Teresina", "Brasília" ,
"Campo Grande", "Cuiabá", "Goiânia",
"Belo Horizonte", "Rio de Janeiro", "São Paulo",
"Vitória","Curitiba", "Florianópolis", "Porto Alegre")
tmp <- mun %>% filter(Município %in% vcapitais) %>%
filter(date>"2020-05-17")
tmp %>% select(Estado,Município) %>% distinct() %>%
group_by(Município) %>% summarise(count = n()) %>%
filter(count>1)
tmp <- tmp %>% filter(!(Município=="Belém" & Estado!="PARA")) %>%
filter(!(Município=="Boa Vista" & Estado!="RORAIMA")) %>%
filter(!(Município=="Campo Grande" & Estado!="MATO GROSSO DO SUL")) %>%
filter(!(Município=="Palmas" & Estado!="TOCANTINS")) %>%
filter(!(Município=="Rio Branco" & Estado!="ACRE"))
View(tmp)
# Classificação e Caracterização dos Espaços Rurais e Urbanos do Brasil
urbanizacao <- read_excel("../Grau_de_urbanizacao.xlsx", guess_max = 100000,
col_names = TRUE,sheet = 2) %>%
dplyr::select(Estado = NM_UF, Município = NM_MUN, Codigo = CD_GCMUN,
pop_area_densa = POP_AREA_DENSA,
pop_area_nao_densa = POP_AREA_NAO_DENSA,
pop_total = POP_TOTAL_UNID_POP, grau_urb = GR_URB,
classe_urb = CLASSES)
View(urbanizacao)
# renomeando as classes de urbanização
urbanizacao <- urbanizacao %>%
mutate(classe_urb = ifelse(classe_urb=="Unidade populacional com moderado grau de urbanizacao","moderado",
ifelse(classe_urb=="Unidade populacional com alto grau de urbanizacao","alto","baixo")))
require(dplyr)
require(readxl)
require(openxlsx)
require(stringi)
require(tidyverse)
# Lendo os dados dos municípios
mun <- readRDS("../dados_por_municipio.rds")
# selecionando e criando as variáveis que vão ser usadas no modelo
# selecionando e criando as variáveis que vão ser usadas
mun <- mun %>%
dplyr::group_by(Codigo) %>%
dplyr::mutate(
recovered = pmax(0, dplyr::lag(confirmed, 14) - dplyr::lag(deaths, 0)),
recovered = ifelse(is.na(recovered), 0, recovered),
infected = confirmed - deaths - recovered,
date = Data,
) %>% ungroup %>% select(Estado,Município,Codigo,codDRS,nomDRS, date,confirmed,
deaths,recovered, Populacao_estimada, IDHM,
PIB_2015,Media_temperatura_2Q_2002,Altitude)
# Classificação e Caracterização dos Espaços Rurais e Urbanos do Brasil
urbanizacao <- read_excel("../Grau_de_urbanizacao.xlsx", guess_max = 100000,
col_names = TRUE,sheet = 2) %>%
dplyr::select(Estado = NM_UF, Município = NM_MUN, Codigo = CD_GCMUN,
pop_area_densa = POP_AREA_DENSA,
pop_area_nao_densa = POP_AREA_NAO_DENSA,
pop_total = POP_TOTAL_UNID_POP, grau_urb = GR_URB,
classe_urb = CLASSES)
# renomeando as classes de urbanização
urbanizacao <- urbanizacao %>%
mutate(classe_urb = ifelse(classe_urb=="Unidade populacional com moderado grau de urbanizacao","moderado",
ifelse(classe_urb=="Unidade populacional com alto grau de urbanizacao","alto","baixo")))
# eliminando o último dígito do código nesses dados do IBGE, para deixar ele
# com 6 dígitos, como está nos dados do Ministério da Saúde
urbanizacao <- urbanizacao %>% mutate(Codigo = str_sub(as.character(Codigo), start = 1,end = 6))
# tirando acentos e deixando em caixa alta os nomes dos estados
urbanizacao <- urbanizacao %>% mutate(Estado = stri_trans_general(str = Estado,
id = "Latin-ASCII")) %>%
mutate(Estado = stri_trans_general(str = Estado,
id = "upper"))
View(urbanizacao)
mun %>% select(Codigo) %>% distinct() %>% dim()
urbanizacao %>% select(Codigo) %>% distinct() %>% dim()
# número de municípios em urbanizacao que não estão em mun
urbanizacao %>% select(Estado,Município,Codigo) %>%
filter(!(Codigo %in% mun$Codigo)) %>% distinct() %>% dim()
# adicionando os dados sobre urbanização dos municípios ao dataframe mun
mun <- mun %>% group_by(Estado,Codigo) %>%
dplyr::inner_join(urbanizacao %>% select(-Município),
by=c("Estado","Codigo")) %>%
ungroup()
View(mun)
vcapitais <- c("Belém", "Boa Vista", "Macapá", "Manaus", "Palmas",
"Porto Velho","Rio Branco", "Aracaju", "Fortaleza",
"João Pessoa", "Maceió", "Natal", "Recife", "Salvador",
"São Luís", "Teresina", "Brasília" ,
"Campo Grande", "Cuiabá", "Goiânia",
"Belo Horizonte", "Rio de Janeiro", "São Paulo",
"Vitória","Curitiba", "Florianópolis", "Porto Alegre")
tmp <- mun %>% filter(Município %in% vcapitais) %>%
filter(date>"2020-05-09")
tmp %>% select(Estado,Município) %>% distinct() %>%
group_by(Município) %>% summarise(count = n()) %>%
filter(count>1)
View(tmp)
table(tmp$Estado)
length(table(tmp$Estado))
tmp <- tmp %>% filter(!(Município=="Belém" & Estado!="PARA")) %>%
filter(!(Município=="Boa Vista" & Estado!="RORAIMA")) %>%
filter(!(Município=="Campo Grande" & Estado!="MATO GROSSO DO SUL")) %>%
filter(!(Município=="Palmas" & Estado!="TOCANTINS")) %>%
filter(!(Município=="Rio Branco" & Estado!="ACRE"))
write.xlsx(x = tmp, file = "Covid_capitais.xlsx")
